
i2cc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c0c  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08002dd4  08002dd4  00003dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e5c  08002e5c  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002e5c  08002e5c  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e5c  08002e5c  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e5c  08002e5c  00003e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002e60  08002e60  00003e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002e64  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000000c  08002e70  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08002e70  000040c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000099f7  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013fb  00000000  00000000  0000da33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c0  00000000  00000000  0000ee30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006eb  00000000  00000000  0000f6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012def  00000000  00000000  0000fddb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ade3  00000000  00000000  00022bca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007544f  00000000  00000000  0002d9ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a2dfc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002474  00000000  00000000  000a2e40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  000a52b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08002dbc 	.word	0x08002dbc

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08002dbc 	.word	0x08002dbc

08000208 <GPIO_Init>:

// Khai báo các biến cần thiết để tránh lỗi undefined reference
I2C_HandleTypeDef hi2c1;
UART_HandleTypeDef huart2;

void GPIO_Init(void) {
 8000208:	b480      	push	{r7}
 800020a:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 800020c:	4b0b      	ldr	r3, [pc, #44]	@ (800023c <GPIO_Init+0x34>)
 800020e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000210:	4a0a      	ldr	r2, [pc, #40]	@ (800023c <GPIO_Init+0x34>)
 8000212:	f043 0301 	orr.w	r3, r3, #1
 8000216:	6313      	str	r3, [r2, #48]	@ 0x30
    GPIOA->MODER |= (2 << 4) | (2 << 6);  // PA2, PA3: AF mode cho UART2
 8000218:	4b09      	ldr	r3, [pc, #36]	@ (8000240 <GPIO_Init+0x38>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	4a08      	ldr	r2, [pc, #32]	@ (8000240 <GPIO_Init+0x38>)
 800021e:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000222:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] |= (7 << 8) | (7 << 12); // AF7: UART2
 8000224:	4b06      	ldr	r3, [pc, #24]	@ (8000240 <GPIO_Init+0x38>)
 8000226:	6a1b      	ldr	r3, [r3, #32]
 8000228:	4a05      	ldr	r2, [pc, #20]	@ (8000240 <GPIO_Init+0x38>)
 800022a:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 800022e:	6213      	str	r3, [r2, #32]
}
 8000230:	bf00      	nop
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	40023800 	.word	0x40023800
 8000240:	40020000 	.word	0x40020000

08000244 <UART2_Init>:

void UART2_Init(void) {
 8000244:	b480      	push	{r7}
 8000246:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000248:	4b18      	ldr	r3, [pc, #96]	@ (80002ac <UART2_Init+0x68>)
 800024a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800024c:	4a17      	ldr	r2, [pc, #92]	@ (80002ac <UART2_Init+0x68>)
 800024e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000252:	6413      	str	r3, [r2, #64]	@ 0x40
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000254:	4b15      	ldr	r3, [pc, #84]	@ (80002ac <UART2_Init+0x68>)
 8000256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000258:	4a14      	ldr	r2, [pc, #80]	@ (80002ac <UART2_Init+0x68>)
 800025a:	f043 0301 	orr.w	r3, r3, #1
 800025e:	6313      	str	r3, [r2, #48]	@ 0x30
    USART2->BRR = 0x8B;  // 115200 baud (HCLK = 16MHz)
 8000260:	4b13      	ldr	r3, [pc, #76]	@ (80002b0 <UART2_Init+0x6c>)
 8000262:	228b      	movs	r2, #139	@ 0x8b
 8000264:	609a      	str	r2, [r3, #8]
    USART2->CR1 = USART_CR1_TE | USART_CR1_UE;
 8000266:	4b12      	ldr	r3, [pc, #72]	@ (80002b0 <UART2_Init+0x6c>)
 8000268:	f242 0208 	movw	r2, #8200	@ 0x2008
 800026c:	60da      	str	r2, [r3, #12]

    // Khởi tạo huart2 để tránh lỗi liên kết
    huart2.Instance = USART2;
 800026e:	4b11      	ldr	r3, [pc, #68]	@ (80002b4 <UART2_Init+0x70>)
 8000270:	4a0f      	ldr	r2, [pc, #60]	@ (80002b0 <UART2_Init+0x6c>)
 8000272:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8000274:	4b0f      	ldr	r3, [pc, #60]	@ (80002b4 <UART2_Init+0x70>)
 8000276:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800027a:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800027c:	4b0d      	ldr	r3, [pc, #52]	@ (80002b4 <UART2_Init+0x70>)
 800027e:	2200      	movs	r2, #0
 8000280:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8000282:	4b0c      	ldr	r3, [pc, #48]	@ (80002b4 <UART2_Init+0x70>)
 8000284:	2200      	movs	r2, #0
 8000286:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8000288:	4b0a      	ldr	r3, [pc, #40]	@ (80002b4 <UART2_Init+0x70>)
 800028a:	2200      	movs	r2, #0
 800028c:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 800028e:	4b09      	ldr	r3, [pc, #36]	@ (80002b4 <UART2_Init+0x70>)
 8000290:	220c      	movs	r2, #12
 8000292:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000294:	4b07      	ldr	r3, [pc, #28]	@ (80002b4 <UART2_Init+0x70>)
 8000296:	2200      	movs	r2, #0
 8000298:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800029a:	4b06      	ldr	r3, [pc, #24]	@ (80002b4 <UART2_Init+0x70>)
 800029c:	2200      	movs	r2, #0
 800029e:	61da      	str	r2, [r3, #28]
}
 80002a0:	bf00      	nop
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	40023800 	.word	0x40023800
 80002b0:	40004400 	.word	0x40004400
 80002b4:	2000007c 	.word	0x2000007c

080002b8 <MX_I2C1_Init>:

// Định nghĩa stub cho I2C để tránh lỗi
void MX_I2C1_Init(void) {
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
    hi2c1.Instance = I2C1;
 80002bc:	4b10      	ldr	r3, [pc, #64]	@ (8000300 <MX_I2C1_Init+0x48>)
 80002be:	4a11      	ldr	r2, [pc, #68]	@ (8000304 <MX_I2C1_Init+0x4c>)
 80002c0:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 100000;
 80002c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000300 <MX_I2C1_Init+0x48>)
 80002c4:	4a10      	ldr	r2, [pc, #64]	@ (8000308 <MX_I2C1_Init+0x50>)
 80002c6:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000300 <MX_I2C1_Init+0x48>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 80002ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000300 <MX_I2C1_Init+0x48>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000300 <MX_I2C1_Init+0x48>)
 80002d6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80002da:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002dc:	4b08      	ldr	r3, [pc, #32]	@ (8000300 <MX_I2C1_Init+0x48>)
 80002de:	2200      	movs	r2, #0
 80002e0:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 80002e2:	4b07      	ldr	r3, [pc, #28]	@ (8000300 <MX_I2C1_Init+0x48>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002e8:	4b05      	ldr	r3, [pc, #20]	@ (8000300 <MX_I2C1_Init+0x48>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002ee:	4b04      	ldr	r3, [pc, #16]	@ (8000300 <MX_I2C1_Init+0x48>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	621a      	str	r2, [r3, #32]
}
 80002f4:	bf00      	nop
 80002f6:	46bd      	mov	sp, r7
 80002f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop
 8000300:	20000028 	.word	0x20000028
 8000304:	40005400 	.word	0x40005400
 8000308:	000186a0 	.word	0x000186a0

0800030c <UART2_SendChar>:

void UART2_SendChar(uint8_t c) {
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
 8000312:	4603      	mov	r3, r0
 8000314:	71fb      	strb	r3, [r7, #7]
    while (!(USART2->SR & USART_SR_TXE));
 8000316:	bf00      	nop
 8000318:	4b07      	ldr	r3, [pc, #28]	@ (8000338 <UART2_SendChar+0x2c>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000320:	2b00      	cmp	r3, #0
 8000322:	d0f9      	beq.n	8000318 <UART2_SendChar+0xc>
    USART2->DR = c;
 8000324:	4a04      	ldr	r2, [pc, #16]	@ (8000338 <UART2_SendChar+0x2c>)
 8000326:	79fb      	ldrb	r3, [r7, #7]
 8000328:	6053      	str	r3, [r2, #4]
}
 800032a:	bf00      	nop
 800032c:	370c      	adds	r7, #12
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	40004400 	.word	0x40004400

0800033c <UART2_SendString>:

void UART2_SendString(char *str) {
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
    while (*str) UART2_SendChar(*str++);
 8000344:	e006      	b.n	8000354 <UART2_SendString+0x18>
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	1c5a      	adds	r2, r3, #1
 800034a:	607a      	str	r2, [r7, #4]
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	4618      	mov	r0, r3
 8000350:	f7ff ffdc 	bl	800030c <UART2_SendChar>
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	2b00      	cmp	r3, #0
 800035a:	d1f4      	bne.n	8000346 <UART2_SendString+0xa>
}
 800035c:	bf00      	nop
 800035e:	bf00      	nop
 8000360:	3708      	adds	r7, #8
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
	...

08000368 <int_to_string>:

void int_to_string(uint16_t num, char *str) {
 8000368:	b480      	push	{r7}
 800036a:	b087      	sub	sp, #28
 800036c:	af00      	add	r7, sp, #0
 800036e:	4603      	mov	r3, r0
 8000370:	6039      	str	r1, [r7, #0]
 8000372:	80fb      	strh	r3, [r7, #6]
    int i = 0;
 8000374:	2300      	movs	r3, #0
 8000376:	617b      	str	r3, [r7, #20]
    if (num == 0) {
 8000378:	88fb      	ldrh	r3, [r7, #6]
 800037a:	2b00      	cmp	r3, #0
 800037c:	d123      	bne.n	80003c6 <int_to_string+0x5e>
        str[i++] = '0';
 800037e:	697b      	ldr	r3, [r7, #20]
 8000380:	1c5a      	adds	r2, r3, #1
 8000382:	617a      	str	r2, [r7, #20]
 8000384:	461a      	mov	r2, r3
 8000386:	683b      	ldr	r3, [r7, #0]
 8000388:	4413      	add	r3, r2
 800038a:	2230      	movs	r2, #48	@ 0x30
 800038c:	701a      	strb	r2, [r3, #0]
 800038e:	e01d      	b.n	80003cc <int_to_string+0x64>
    } else {
        while (num > 0) {
            str[i++] = (num % 10) + '0';
 8000390:	88fa      	ldrh	r2, [r7, #6]
 8000392:	4b29      	ldr	r3, [pc, #164]	@ (8000438 <int_to_string+0xd0>)
 8000394:	fba3 1302 	umull	r1, r3, r3, r2
 8000398:	08d9      	lsrs	r1, r3, #3
 800039a:	460b      	mov	r3, r1
 800039c:	009b      	lsls	r3, r3, #2
 800039e:	440b      	add	r3, r1
 80003a0:	005b      	lsls	r3, r3, #1
 80003a2:	1ad3      	subs	r3, r2, r3
 80003a4:	b29b      	uxth	r3, r3
 80003a6:	b2da      	uxtb	r2, r3
 80003a8:	697b      	ldr	r3, [r7, #20]
 80003aa:	1c59      	adds	r1, r3, #1
 80003ac:	6179      	str	r1, [r7, #20]
 80003ae:	4619      	mov	r1, r3
 80003b0:	683b      	ldr	r3, [r7, #0]
 80003b2:	440b      	add	r3, r1
 80003b4:	3230      	adds	r2, #48	@ 0x30
 80003b6:	b2d2      	uxtb	r2, r2
 80003b8:	701a      	strb	r2, [r3, #0]
            num /= 10;
 80003ba:	88fb      	ldrh	r3, [r7, #6]
 80003bc:	4a1e      	ldr	r2, [pc, #120]	@ (8000438 <int_to_string+0xd0>)
 80003be:	fba2 2303 	umull	r2, r3, r2, r3
 80003c2:	08db      	lsrs	r3, r3, #3
 80003c4:	80fb      	strh	r3, [r7, #6]
        while (num > 0) {
 80003c6:	88fb      	ldrh	r3, [r7, #6]
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d1e1      	bne.n	8000390 <int_to_string+0x28>
        }
    }
    int j = 0;
 80003cc:	2300      	movs	r3, #0
 80003ce:	613b      	str	r3, [r7, #16]
    char temp;
    for (j = 0; j < i / 2; j++) {
 80003d0:	2300      	movs	r3, #0
 80003d2:	613b      	str	r3, [r7, #16]
 80003d4:	e01c      	b.n	8000410 <int_to_string+0xa8>
        temp = str[j];
 80003d6:	693b      	ldr	r3, [r7, #16]
 80003d8:	683a      	ldr	r2, [r7, #0]
 80003da:	4413      	add	r3, r2
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	73fb      	strb	r3, [r7, #15]
        str[j] = str[i - 1 - j];
 80003e0:	697b      	ldr	r3, [r7, #20]
 80003e2:	1e5a      	subs	r2, r3, #1
 80003e4:	693b      	ldr	r3, [r7, #16]
 80003e6:	1ad3      	subs	r3, r2, r3
 80003e8:	461a      	mov	r2, r3
 80003ea:	683b      	ldr	r3, [r7, #0]
 80003ec:	441a      	add	r2, r3
 80003ee:	693b      	ldr	r3, [r7, #16]
 80003f0:	6839      	ldr	r1, [r7, #0]
 80003f2:	440b      	add	r3, r1
 80003f4:	7812      	ldrb	r2, [r2, #0]
 80003f6:	701a      	strb	r2, [r3, #0]
        str[i - 1 - j] = temp;
 80003f8:	697b      	ldr	r3, [r7, #20]
 80003fa:	1e5a      	subs	r2, r3, #1
 80003fc:	693b      	ldr	r3, [r7, #16]
 80003fe:	1ad3      	subs	r3, r2, r3
 8000400:	461a      	mov	r2, r3
 8000402:	683b      	ldr	r3, [r7, #0]
 8000404:	4413      	add	r3, r2
 8000406:	7bfa      	ldrb	r2, [r7, #15]
 8000408:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < i / 2; j++) {
 800040a:	693b      	ldr	r3, [r7, #16]
 800040c:	3301      	adds	r3, #1
 800040e:	613b      	str	r3, [r7, #16]
 8000410:	697b      	ldr	r3, [r7, #20]
 8000412:	0fda      	lsrs	r2, r3, #31
 8000414:	4413      	add	r3, r2
 8000416:	105b      	asrs	r3, r3, #1
 8000418:	461a      	mov	r2, r3
 800041a:	693b      	ldr	r3, [r7, #16]
 800041c:	4293      	cmp	r3, r2
 800041e:	dbda      	blt.n	80003d6 <int_to_string+0x6e>
    }
    str[i] = '\0';
 8000420:	697b      	ldr	r3, [r7, #20]
 8000422:	683a      	ldr	r2, [r7, #0]
 8000424:	4413      	add	r3, r2
 8000426:	2200      	movs	r2, #0
 8000428:	701a      	strb	r2, [r3, #0]
}
 800042a:	bf00      	nop
 800042c:	371c      	adds	r7, #28
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	cccccccd 	.word	0xcccccccd

0800043c <delay_ms>:

// Hàm delay đơn giản sử dụng vòng lặp
void delay_ms(uint32_t ms) {
 800043c:	b480      	push	{r7}
 800043e:	b085      	sub	sp, #20
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
    for(volatile uint32_t i = 0; i < ms * 2000; i++);  // Giá trị 2000 cần điều chỉnh tùy theo tần số CPU
 8000444:	2300      	movs	r3, #0
 8000446:	60fb      	str	r3, [r7, #12]
 8000448:	e002      	b.n	8000450 <delay_ms+0x14>
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	3301      	adds	r3, #1
 800044e:	60fb      	str	r3, [r7, #12]
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000456:	fb03 f202 	mul.w	r2, r3, r2
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	429a      	cmp	r2, r3
 800045e:	d8f4      	bhi.n	800044a <delay_ms+0xe>
}
 8000460:	bf00      	nop
 8000462:	bf00      	nop
 8000464:	3714      	adds	r7, #20
 8000466:	46bd      	mov	sp, r7
 8000468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046c:	4770      	bx	lr
	...

08000470 <main>:

int main(void) {
 8000470:	b580      	push	{r7, lr}
 8000472:	b0b8      	sub	sp, #224	@ 0xe0
 8000474:	af00      	add	r7, sp, #0
    HAL_Init();  // Khởi tạo HAL library
 8000476:	f000 f943 	bl	8000700 <HAL_Init>

    GPIO_Init();
 800047a:	f7ff fec5 	bl	8000208 <GPIO_Init>
    UART2_Init();
 800047e:	f7ff fee1 	bl	8000244 <UART2_Init>
    MX_I2C1_Init();  // Thêm khởi tạo I2C để tránh lỗi
 8000482:	f7ff ff19 	bl	80002b8 <MX_I2C1_Init>

    uint16_t array[100];  // Tạo mảng từ 1 đến 100
    for (int i = 0; i < 100; i++) {
 8000486:	2300      	movs	r3, #0
 8000488:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800048c:	e010      	b.n	80004b0 <main+0x40>
        array[i] = i + 1;
 800048e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000492:	b29b      	uxth	r3, r3
 8000494:	3301      	adds	r3, #1
 8000496:	b29a      	uxth	r2, r3
 8000498:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800049c:	005b      	lsls	r3, r3, #1
 800049e:	33e0      	adds	r3, #224	@ 0xe0
 80004a0:	443b      	add	r3, r7
 80004a2:	f823 2cd0 	strh.w	r2, [r3, #-208]
    for (int i = 0; i < 100; i++) {
 80004a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80004aa:	3301      	adds	r3, #1
 80004ac:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80004b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80004b4:	2b63      	cmp	r3, #99	@ 0x63
 80004b6:	ddea      	ble.n	800048e <main+0x1e>
    }

    char buffer[10];  // Buffer để chuyển số thành chuỗi

    while (1) {
        for (int i = 0; i < 1000; i++) {
 80004b8:	2300      	movs	r3, #0
 80004ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80004be:	e053      	b.n	8000568 <main+0xf8>
            int_to_string(array[i], buffer);
 80004c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80004c4:	005b      	lsls	r3, r3, #1
 80004c6:	33e0      	adds	r3, #224	@ 0xe0
 80004c8:	443b      	add	r3, r7
 80004ca:	f833 3cd0 	ldrh.w	r3, [r3, #-208]
 80004ce:	1d3a      	adds	r2, r7, #4
 80004d0:	4611      	mov	r1, r2
 80004d2:	4618      	mov	r0, r3
 80004d4:	f7ff ff48 	bl	8000368 <int_to_string>
            UART2_SendString("\n");
 80004d8:	4828      	ldr	r0, [pc, #160]	@ (800057c <main+0x10c>)
 80004da:	f7ff ff2f 	bl	800033c <UART2_SendString>
            delay_ms(5000);
 80004de:	f241 3088 	movw	r0, #5000	@ 0x1388
 80004e2:	f7ff ffab 	bl	800043c <delay_ms>
            UART2_SendString("Received: Hello");
 80004e6:	4826      	ldr	r0, [pc, #152]	@ (8000580 <main+0x110>)
 80004e8:	f7ff ff28 	bl	800033c <UART2_SendString>
            delay_ms(3000);
 80004ec:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80004f0:	f7ff ffa4 	bl	800043c <delay_ms>
            UART2_SendString("\n");
 80004f4:	4821      	ldr	r0, [pc, #132]	@ (800057c <main+0x10c>)
 80004f6:	f7ff ff21 	bl	800033c <UART2_SendString>
            UART2_SendString("Received: 1");
 80004fa:	4822      	ldr	r0, [pc, #136]	@ (8000584 <main+0x114>)
 80004fc:	f7ff ff1e 	bl	800033c <UART2_SendString>
            delay_ms(3000);
 8000500:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000504:	f7ff ff9a 	bl	800043c <delay_ms>
            UART2_SendString("\n");
 8000508:	481c      	ldr	r0, [pc, #112]	@ (800057c <main+0x10c>)
 800050a:	f7ff ff17 	bl	800033c <UART2_SendString>
            UART2_SendString("Received: 111111");
 800050e:	481e      	ldr	r0, [pc, #120]	@ (8000588 <main+0x118>)
 8000510:	f7ff ff14 	bl	800033c <UART2_SendString>
            delay_ms(3000);
 8000514:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000518:	f7ff ff90 	bl	800043c <delay_ms>
            UART2_SendString("\n");
 800051c:	4817      	ldr	r0, [pc, #92]	@ (800057c <main+0x10c>)
 800051e:	f7ff ff0d 	bl	800033c <UART2_SendString>
            UART2_SendString("Received: 222222");
 8000522:	481a      	ldr	r0, [pc, #104]	@ (800058c <main+0x11c>)
 8000524:	f7ff ff0a 	bl	800033c <UART2_SendString>
            delay_ms(3000);
 8000528:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800052c:	f7ff ff86 	bl	800043c <delay_ms>
            UART2_SendString("\n");
 8000530:	4812      	ldr	r0, [pc, #72]	@ (800057c <main+0x10c>)
 8000532:	f7ff ff03 	bl	800033c <UART2_SendString>
            UART2_SendString("Received: 333333");
 8000536:	4816      	ldr	r0, [pc, #88]	@ (8000590 <main+0x120>)
 8000538:	f7ff ff00 	bl	800033c <UART2_SendString>
            delay_ms(3000);
 800053c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000540:	f7ff ff7c 	bl	800043c <delay_ms>
            UART2_SendString("\n");
 8000544:	480d      	ldr	r0, [pc, #52]	@ (800057c <main+0x10c>)
 8000546:	f7ff fef9 	bl	800033c <UART2_SendString>
            UART2_SendString("Received: wasdwasd");
 800054a:	4812      	ldr	r0, [pc, #72]	@ (8000594 <main+0x124>)
 800054c:	f7ff fef6 	bl	800033c <UART2_SendString>
            UART2_SendString("\n");
 8000550:	480a      	ldr	r0, [pc, #40]	@ (800057c <main+0x10c>)
 8000552:	f7ff fef3 	bl	800033c <UART2_SendString>
            delay_ms(1000); // Xuống dòng sau mỗi số
 8000556:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800055a:	f7ff ff6f 	bl	800043c <delay_ms>
        for (int i = 0; i < 1000; i++) {
 800055e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000562:	3301      	adds	r3, #1
 8000564:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8000568:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800056c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000570:	dba6      	blt.n	80004c0 <main+0x50>
        }

        UART2_SendString("--------------------\n");    // Dấu phân cách giữa các lần gửi
 8000572:	4809      	ldr	r0, [pc, #36]	@ (8000598 <main+0x128>)
 8000574:	f7ff fee2 	bl	800033c <UART2_SendString>
        for (int i = 0; i < 1000; i++) {
 8000578:	e79e      	b.n	80004b8 <main+0x48>
 800057a:	bf00      	nop
 800057c:	08002dd4 	.word	0x08002dd4
 8000580:	08002dd8 	.word	0x08002dd8
 8000584:	08002de8 	.word	0x08002de8
 8000588:	08002df4 	.word	0x08002df4
 800058c:	08002e08 	.word	0x08002e08
 8000590:	08002e1c 	.word	0x08002e1c
 8000594:	08002e30 	.word	0x08002e30
 8000598:	08002e44 	.word	0x08002e44

0800059c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005a2:	2300      	movs	r3, #0
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	4b10      	ldr	r3, [pc, #64]	@ (80005e8 <HAL_MspInit+0x4c>)
 80005a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005aa:	4a0f      	ldr	r2, [pc, #60]	@ (80005e8 <HAL_MspInit+0x4c>)
 80005ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80005b2:	4b0d      	ldr	r3, [pc, #52]	@ (80005e8 <HAL_MspInit+0x4c>)
 80005b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005be:	2300      	movs	r3, #0
 80005c0:	603b      	str	r3, [r7, #0]
 80005c2:	4b09      	ldr	r3, [pc, #36]	@ (80005e8 <HAL_MspInit+0x4c>)
 80005c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c6:	4a08      	ldr	r2, [pc, #32]	@ (80005e8 <HAL_MspInit+0x4c>)
 80005c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80005ce:	4b06      	ldr	r3, [pc, #24]	@ (80005e8 <HAL_MspInit+0x4c>)
 80005d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005d6:	603b      	str	r3, [r7, #0]
 80005d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005da:	bf00      	nop
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	40023800 	.word	0x40023800

080005ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005f0:	bf00      	nop
 80005f2:	e7fd      	b.n	80005f0 <NMI_Handler+0x4>

080005f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005f8:	bf00      	nop
 80005fa:	e7fd      	b.n	80005f8 <HardFault_Handler+0x4>

080005fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000600:	bf00      	nop
 8000602:	e7fd      	b.n	8000600 <MemManage_Handler+0x4>

08000604 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000608:	bf00      	nop
 800060a:	e7fd      	b.n	8000608 <BusFault_Handler+0x4>

0800060c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000610:	bf00      	nop
 8000612:	e7fd      	b.n	8000610 <UsageFault_Handler+0x4>

08000614 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr

08000622 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000622:	b480      	push	{r7}
 8000624:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000626:	bf00      	nop
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr

08000630 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000634:	bf00      	nop
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr

0800063e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800063e:	b580      	push	{r7, lr}
 8000640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000642:	f000 f8af 	bl	80007a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
	...

0800064c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000650:	4802      	ldr	r0, [pc, #8]	@ (800065c <I2C1_EV_IRQHandler+0x10>)
 8000652:	f000 fa61 	bl	8000b18 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	20000028 	.word	0x20000028

08000660 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000664:	4802      	ldr	r0, [pc, #8]	@ (8000670 <I2C1_ER_IRQHandler+0x10>)
 8000666:	f000 fbaa 	bl	8000dbe <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20000028 	.word	0x20000028

08000674 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000678:	4802      	ldr	r0, [pc, #8]	@ (8000684 <USART2_IRQHandler+0x10>)
 800067a:	f001 ff21 	bl	80024c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	2000007c 	.word	0x2000007c

08000688 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800068c:	4b06      	ldr	r3, [pc, #24]	@ (80006a8 <SystemInit+0x20>)
 800068e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000692:	4a05      	ldr	r2, [pc, #20]	@ (80006a8 <SystemInit+0x20>)
 8000694:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000698:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800069c:	bf00      	nop
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80006ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80006e4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80006b0:	f7ff ffea 	bl	8000688 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006b4:	480c      	ldr	r0, [pc, #48]	@ (80006e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006b6:	490d      	ldr	r1, [pc, #52]	@ (80006ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006b8:	4a0d      	ldr	r2, [pc, #52]	@ (80006f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006bc:	e002      	b.n	80006c4 <LoopCopyDataInit>

080006be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006c2:	3304      	adds	r3, #4

080006c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006c8:	d3f9      	bcc.n	80006be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ca:	4a0a      	ldr	r2, [pc, #40]	@ (80006f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80006cc:	4c0a      	ldr	r4, [pc, #40]	@ (80006f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80006ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006d0:	e001      	b.n	80006d6 <LoopFillZerobss>

080006d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006d4:	3204      	adds	r2, #4

080006d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006d8:	d3fb      	bcc.n	80006d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006da:	f002 fb4b 	bl	8002d74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80006de:	f7ff fec7 	bl	8000470 <main>
  bx  lr    
 80006e2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80006e4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80006e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006ec:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006f0:	08002e64 	.word	0x08002e64
  ldr r2, =_sbss
 80006f4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006f8:	200000c8 	.word	0x200000c8

080006fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006fc:	e7fe      	b.n	80006fc <ADC_IRQHandler>
	...

08000700 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000704:	4b0e      	ldr	r3, [pc, #56]	@ (8000740 <HAL_Init+0x40>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a0d      	ldr	r2, [pc, #52]	@ (8000740 <HAL_Init+0x40>)
 800070a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800070e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000710:	4b0b      	ldr	r3, [pc, #44]	@ (8000740 <HAL_Init+0x40>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a0a      	ldr	r2, [pc, #40]	@ (8000740 <HAL_Init+0x40>)
 8000716:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800071a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800071c:	4b08      	ldr	r3, [pc, #32]	@ (8000740 <HAL_Init+0x40>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a07      	ldr	r2, [pc, #28]	@ (8000740 <HAL_Init+0x40>)
 8000722:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000726:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000728:	2003      	movs	r0, #3
 800072a:	f000 f90d 	bl	8000948 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800072e:	200f      	movs	r0, #15
 8000730:	f000 f808 	bl	8000744 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000734:	f7ff ff32 	bl	800059c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000738:	2300      	movs	r3, #0
}
 800073a:	4618      	mov	r0, r3
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40023c00 	.word	0x40023c00

08000744 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800074c:	4b12      	ldr	r3, [pc, #72]	@ (8000798 <HAL_InitTick+0x54>)
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	4b12      	ldr	r3, [pc, #72]	@ (800079c <HAL_InitTick+0x58>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	4619      	mov	r1, r3
 8000756:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800075a:	fbb3 f3f1 	udiv	r3, r3, r1
 800075e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000762:	4618      	mov	r0, r3
 8000764:	f000 f917 	bl	8000996 <HAL_SYSTICK_Config>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800076e:	2301      	movs	r3, #1
 8000770:	e00e      	b.n	8000790 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	2b0f      	cmp	r3, #15
 8000776:	d80a      	bhi.n	800078e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000778:	2200      	movs	r2, #0
 800077a:	6879      	ldr	r1, [r7, #4]
 800077c:	f04f 30ff 	mov.w	r0, #4294967295
 8000780:	f000 f8ed 	bl	800095e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000784:	4a06      	ldr	r2, [pc, #24]	@ (80007a0 <HAL_InitTick+0x5c>)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800078a:	2300      	movs	r3, #0
 800078c:	e000      	b.n	8000790 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800078e:	2301      	movs	r3, #1
}
 8000790:	4618      	mov	r0, r3
 8000792:	3708      	adds	r7, #8
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000000 	.word	0x20000000
 800079c:	20000008 	.word	0x20000008
 80007a0:	20000004 	.word	0x20000004

080007a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007a8:	4b06      	ldr	r3, [pc, #24]	@ (80007c4 <HAL_IncTick+0x20>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	461a      	mov	r2, r3
 80007ae:	4b06      	ldr	r3, [pc, #24]	@ (80007c8 <HAL_IncTick+0x24>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4413      	add	r3, r2
 80007b4:	4a04      	ldr	r2, [pc, #16]	@ (80007c8 <HAL_IncTick+0x24>)
 80007b6:	6013      	str	r3, [r2, #0]
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	20000008 	.word	0x20000008
 80007c8:	200000c4 	.word	0x200000c4

080007cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  return uwTick;
 80007d0:	4b03      	ldr	r3, [pc, #12]	@ (80007e0 <HAL_GetTick+0x14>)
 80007d2:	681b      	ldr	r3, [r3, #0]
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	200000c4 	.word	0x200000c4

080007e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b085      	sub	sp, #20
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	f003 0307 	and.w	r3, r3, #7
 80007f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000828 <__NVIC_SetPriorityGrouping+0x44>)
 80007f6:	68db      	ldr	r3, [r3, #12]
 80007f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007fa:	68ba      	ldr	r2, [r7, #8]
 80007fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000800:	4013      	ands	r3, r2
 8000802:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800080c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000810:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000814:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000816:	4a04      	ldr	r2, [pc, #16]	@ (8000828 <__NVIC_SetPriorityGrouping+0x44>)
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	60d3      	str	r3, [r2, #12]
}
 800081c:	bf00      	nop
 800081e:	3714      	adds	r7, #20
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr
 8000828:	e000ed00 	.word	0xe000ed00

0800082c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000830:	4b04      	ldr	r3, [pc, #16]	@ (8000844 <__NVIC_GetPriorityGrouping+0x18>)
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	0a1b      	lsrs	r3, r3, #8
 8000836:	f003 0307 	and.w	r3, r3, #7
}
 800083a:	4618      	mov	r0, r3
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	e000ed00 	.word	0xe000ed00

08000848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	6039      	str	r1, [r7, #0]
 8000852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000858:	2b00      	cmp	r3, #0
 800085a:	db0a      	blt.n	8000872 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	b2da      	uxtb	r2, r3
 8000860:	490c      	ldr	r1, [pc, #48]	@ (8000894 <__NVIC_SetPriority+0x4c>)
 8000862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000866:	0112      	lsls	r2, r2, #4
 8000868:	b2d2      	uxtb	r2, r2
 800086a:	440b      	add	r3, r1
 800086c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000870:	e00a      	b.n	8000888 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	b2da      	uxtb	r2, r3
 8000876:	4908      	ldr	r1, [pc, #32]	@ (8000898 <__NVIC_SetPriority+0x50>)
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	f003 030f 	and.w	r3, r3, #15
 800087e:	3b04      	subs	r3, #4
 8000880:	0112      	lsls	r2, r2, #4
 8000882:	b2d2      	uxtb	r2, r2
 8000884:	440b      	add	r3, r1
 8000886:	761a      	strb	r2, [r3, #24]
}
 8000888:	bf00      	nop
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	e000e100 	.word	0xe000e100
 8000898:	e000ed00 	.word	0xe000ed00

0800089c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800089c:	b480      	push	{r7}
 800089e:	b089      	sub	sp, #36	@ 0x24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	60f8      	str	r0, [r7, #12]
 80008a4:	60b9      	str	r1, [r7, #8]
 80008a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	f003 0307 	and.w	r3, r3, #7
 80008ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008b0:	69fb      	ldr	r3, [r7, #28]
 80008b2:	f1c3 0307 	rsb	r3, r3, #7
 80008b6:	2b04      	cmp	r3, #4
 80008b8:	bf28      	it	cs
 80008ba:	2304      	movcs	r3, #4
 80008bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	3304      	adds	r3, #4
 80008c2:	2b06      	cmp	r3, #6
 80008c4:	d902      	bls.n	80008cc <NVIC_EncodePriority+0x30>
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	3b03      	subs	r3, #3
 80008ca:	e000      	b.n	80008ce <NVIC_EncodePriority+0x32>
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008d0:	f04f 32ff 	mov.w	r2, #4294967295
 80008d4:	69bb      	ldr	r3, [r7, #24]
 80008d6:	fa02 f303 	lsl.w	r3, r2, r3
 80008da:	43da      	mvns	r2, r3
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	401a      	ands	r2, r3
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008e4:	f04f 31ff 	mov.w	r1, #4294967295
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	fa01 f303 	lsl.w	r3, r1, r3
 80008ee:	43d9      	mvns	r1, r3
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f4:	4313      	orrs	r3, r2
         );
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3724      	adds	r7, #36	@ 0x24
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
	...

08000904 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	3b01      	subs	r3, #1
 8000910:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000914:	d301      	bcc.n	800091a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000916:	2301      	movs	r3, #1
 8000918:	e00f      	b.n	800093a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800091a:	4a0a      	ldr	r2, [pc, #40]	@ (8000944 <SysTick_Config+0x40>)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	3b01      	subs	r3, #1
 8000920:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000922:	210f      	movs	r1, #15
 8000924:	f04f 30ff 	mov.w	r0, #4294967295
 8000928:	f7ff ff8e 	bl	8000848 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800092c:	4b05      	ldr	r3, [pc, #20]	@ (8000944 <SysTick_Config+0x40>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000932:	4b04      	ldr	r3, [pc, #16]	@ (8000944 <SysTick_Config+0x40>)
 8000934:	2207      	movs	r2, #7
 8000936:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000938:	2300      	movs	r3, #0
}
 800093a:	4618      	mov	r0, r3
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	e000e010 	.word	0xe000e010

08000948 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f7ff ff47 	bl	80007e4 <__NVIC_SetPriorityGrouping>
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800095e:	b580      	push	{r7, lr}
 8000960:	b086      	sub	sp, #24
 8000962:	af00      	add	r7, sp, #0
 8000964:	4603      	mov	r3, r0
 8000966:	60b9      	str	r1, [r7, #8]
 8000968:	607a      	str	r2, [r7, #4]
 800096a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800096c:	2300      	movs	r3, #0
 800096e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000970:	f7ff ff5c 	bl	800082c <__NVIC_GetPriorityGrouping>
 8000974:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000976:	687a      	ldr	r2, [r7, #4]
 8000978:	68b9      	ldr	r1, [r7, #8]
 800097a:	6978      	ldr	r0, [r7, #20]
 800097c:	f7ff ff8e 	bl	800089c <NVIC_EncodePriority>
 8000980:	4602      	mov	r2, r0
 8000982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000986:	4611      	mov	r1, r2
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff ff5d 	bl	8000848 <__NVIC_SetPriority>
}
 800098e:	bf00      	nop
 8000990:	3718      	adds	r7, #24
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000996:	b580      	push	{r7, lr}
 8000998:	b082      	sub	sp, #8
 800099a:	af00      	add	r7, sp, #0
 800099c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800099e:	6878      	ldr	r0, [r7, #4]
 80009a0:	f7ff ffb0 	bl	8000904 <SysTick_Config>
 80009a4:	4603      	mov	r3, r0
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}

080009ae <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b084      	sub	sp, #16
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009ba:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80009bc:	f7ff ff06 	bl	80007cc <HAL_GetTick>
 80009c0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	2b02      	cmp	r3, #2
 80009cc:	d008      	beq.n	80009e0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2280      	movs	r2, #128	@ 0x80
 80009d2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2200      	movs	r2, #0
 80009d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80009dc:	2301      	movs	r3, #1
 80009de:	e052      	b.n	8000a86 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f022 0216 	bic.w	r2, r2, #22
 80009ee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	695a      	ldr	r2, [r3, #20]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80009fe:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d103      	bne.n	8000a10 <HAL_DMA_Abort+0x62>
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d007      	beq.n	8000a20 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f022 0208 	bic.w	r2, r2, #8
 8000a1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	681a      	ldr	r2, [r3, #0]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f022 0201 	bic.w	r2, r2, #1
 8000a2e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000a30:	e013      	b.n	8000a5a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000a32:	f7ff fecb 	bl	80007cc <HAL_GetTick>
 8000a36:	4602      	mov	r2, r0
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	1ad3      	subs	r3, r2, r3
 8000a3c:	2b05      	cmp	r3, #5
 8000a3e:	d90c      	bls.n	8000a5a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2220      	movs	r2, #32
 8000a44:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2203      	movs	r2, #3
 8000a4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2200      	movs	r2, #0
 8000a52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000a56:	2303      	movs	r3, #3
 8000a58:	e015      	b.n	8000a86 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f003 0301 	and.w	r3, r3, #1
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d1e4      	bne.n	8000a32 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000a6c:	223f      	movs	r2, #63	@ 0x3f
 8000a6e:	409a      	lsls	r2, r3
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2201      	movs	r2, #1
 8000a78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2200      	movs	r2, #0
 8000a80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000a84:	2300      	movs	r3, #0
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3710      	adds	r7, #16
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	b083      	sub	sp, #12
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	2b02      	cmp	r3, #2
 8000aa0:	d004      	beq.n	8000aac <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2280      	movs	r2, #128	@ 0x80
 8000aa6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	e00c      	b.n	8000ac6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2205      	movs	r2, #5
 8000ab0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f022 0201 	bic.w	r2, r2, #1
 8000ac2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000ac4:	2300      	movs	r3, #0
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	b083      	sub	sp, #12
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000ae0:	b2db      	uxtb	r3, r3
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr

08000aee <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8000aee:	b480      	push	{r7}
 8000af0:	b083      	sub	sp, #12
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	695b      	ldr	r3, [r3, #20]
 8000afc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b00:	2b80      	cmp	r3, #128	@ 0x80
 8000b02:	d103      	bne.n	8000b0c <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2200      	movs	r2, #0
 8000b0a:	611a      	str	r2, [r3, #16]
  }
}
 8000b0c:	bf00      	nop
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr

08000b18 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b088      	sub	sp, #32
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b30:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8000b38:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000b40:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8000b42:	7bfb      	ldrb	r3, [r7, #15]
 8000b44:	2b10      	cmp	r3, #16
 8000b46:	d003      	beq.n	8000b50 <HAL_I2C_EV_IRQHandler+0x38>
 8000b48:	7bfb      	ldrb	r3, [r7, #15]
 8000b4a:	2b40      	cmp	r3, #64	@ 0x40
 8000b4c:	f040 80b1 	bne.w	8000cb2 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	699b      	ldr	r3, [r3, #24]
 8000b56:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	695b      	ldr	r3, [r3, #20]
 8000b5e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8000b60:	69fb      	ldr	r3, [r7, #28]
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d10d      	bne.n	8000b86 <HAL_I2C_EV_IRQHandler+0x6e>
 8000b6a:	693b      	ldr	r3, [r7, #16]
 8000b6c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8000b70:	d003      	beq.n	8000b7a <HAL_I2C_EV_IRQHandler+0x62>
 8000b72:	693b      	ldr	r3, [r7, #16]
 8000b74:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8000b78:	d101      	bne.n	8000b7e <HAL_I2C_EV_IRQHandler+0x66>
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e000      	b.n	8000b80 <HAL_I2C_EV_IRQHandler+0x68>
 8000b7e:	2300      	movs	r3, #0
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	f000 8114 	beq.w	8000dae <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8000b86:	69fb      	ldr	r3, [r7, #28]
 8000b88:	f003 0301 	and.w	r3, r3, #1
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d00b      	beq.n	8000ba8 <HAL_I2C_EV_IRQHandler+0x90>
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d006      	beq.n	8000ba8 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f001 fc74 	bl	8002488 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	f000 fd7a 	bl	800169a <I2C_Master_SB>
 8000ba6:	e083      	b.n	8000cb0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8000ba8:	69fb      	ldr	r3, [r7, #28]
 8000baa:	f003 0308 	and.w	r3, r3, #8
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d008      	beq.n	8000bc4 <HAL_I2C_EV_IRQHandler+0xac>
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d003      	beq.n	8000bc4 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8000bbc:	6878      	ldr	r0, [r7, #4]
 8000bbe:	f000 fdf2 	bl	80017a6 <I2C_Master_ADD10>
 8000bc2:	e075      	b.n	8000cb0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8000bc4:	69fb      	ldr	r3, [r7, #28]
 8000bc6:	f003 0302 	and.w	r3, r3, #2
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d008      	beq.n	8000be0 <HAL_I2C_EV_IRQHandler+0xc8>
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d003      	beq.n	8000be0 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f000 fe0e 	bl	80017fa <I2C_Master_ADDR>
 8000bde:	e067      	b.n	8000cb0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8000be0:	69bb      	ldr	r3, [r7, #24]
 8000be2:	f003 0304 	and.w	r3, r3, #4
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d036      	beq.n	8000c58 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000bf4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000bf8:	f000 80db 	beq.w	8000db2 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8000bfc:	69fb      	ldr	r3, [r7, #28]
 8000bfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d00d      	beq.n	8000c22 <HAL_I2C_EV_IRQHandler+0x10a>
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d008      	beq.n	8000c22 <HAL_I2C_EV_IRQHandler+0x10a>
 8000c10:	69fb      	ldr	r3, [r7, #28]
 8000c12:	f003 0304 	and.w	r3, r3, #4
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d103      	bne.n	8000c22 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f000 f9d6 	bl	8000fcc <I2C_MasterTransmit_TXE>
 8000c20:	e046      	b.n	8000cb0 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	f003 0304 	and.w	r3, r3, #4
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	f000 80c2 	beq.w	8000db2 <HAL_I2C_EV_IRQHandler+0x29a>
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	f000 80bc 	beq.w	8000db2 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8000c3a:	7bbb      	ldrb	r3, [r7, #14]
 8000c3c:	2b21      	cmp	r3, #33	@ 0x21
 8000c3e:	d103      	bne.n	8000c48 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f000 fa5f 	bl	8001104 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8000c46:	e0b4      	b.n	8000db2 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8000c48:	7bfb      	ldrb	r3, [r7, #15]
 8000c4a:	2b40      	cmp	r3, #64	@ 0x40
 8000c4c:	f040 80b1 	bne.w	8000db2 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f000 facd 	bl	80011f0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8000c56:	e0ac      	b.n	8000db2 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000c62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000c66:	f000 80a4 	beq.w	8000db2 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d00d      	beq.n	8000c90 <HAL_I2C_EV_IRQHandler+0x178>
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d008      	beq.n	8000c90 <HAL_I2C_EV_IRQHandler+0x178>
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	f003 0304 	and.w	r3, r3, #4
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d103      	bne.n	8000c90 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f000 fb49 	bl	8001320 <I2C_MasterReceive_RXNE>
 8000c8e:	e00f      	b.n	8000cb0 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8000c90:	69fb      	ldr	r3, [r7, #28]
 8000c92:	f003 0304 	and.w	r3, r3, #4
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	f000 808b 	beq.w	8000db2 <HAL_I2C_EV_IRQHandler+0x29a>
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	f000 8085 	beq.w	8000db2 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8000ca8:	6878      	ldr	r0, [r7, #4]
 8000caa:	f000 fc01 	bl	80014b0 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8000cae:	e080      	b.n	8000db2 <HAL_I2C_EV_IRQHandler+0x29a>
 8000cb0:	e07f      	b.n	8000db2 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d004      	beq.n	8000cc4 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	695b      	ldr	r3, [r3, #20]
 8000cc0:	61fb      	str	r3, [r7, #28]
 8000cc2:	e007      	b.n	8000cd4 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	699b      	ldr	r3, [r3, #24]
 8000cca:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	695b      	ldr	r3, [r3, #20]
 8000cd2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8000cd4:	69fb      	ldr	r3, [r7, #28]
 8000cd6:	f003 0302 	and.w	r3, r3, #2
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d011      	beq.n	8000d02 <HAL_I2C_EV_IRQHandler+0x1ea>
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d00c      	beq.n	8000d02 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d003      	beq.n	8000cf8 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	699b      	ldr	r3, [r3, #24]
 8000cf6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8000cf8:	69b9      	ldr	r1, [r7, #24]
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	f000 ffcc 	bl	8001c98 <I2C_Slave_ADDR>
 8000d00:	e05a      	b.n	8000db8 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	f003 0310 	and.w	r3, r3, #16
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d008      	beq.n	8000d1e <HAL_I2C_EV_IRQHandler+0x206>
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d003      	beq.n	8000d1e <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f001 f806 	bl	8001d28 <I2C_Slave_STOPF>
 8000d1c:	e04c      	b.n	8000db8 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8000d1e:	7bbb      	ldrb	r3, [r7, #14]
 8000d20:	2b21      	cmp	r3, #33	@ 0x21
 8000d22:	d002      	beq.n	8000d2a <HAL_I2C_EV_IRQHandler+0x212>
 8000d24:	7bbb      	ldrb	r3, [r7, #14]
 8000d26:	2b29      	cmp	r3, #41	@ 0x29
 8000d28:	d120      	bne.n	8000d6c <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d00d      	beq.n	8000d50 <HAL_I2C_EV_IRQHandler+0x238>
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d008      	beq.n	8000d50 <HAL_I2C_EV_IRQHandler+0x238>
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	f003 0304 	and.w	r3, r3, #4
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d103      	bne.n	8000d50 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f000 fee7 	bl	8001b1c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8000d4e:	e032      	b.n	8000db6 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	f003 0304 	and.w	r3, r3, #4
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d02d      	beq.n	8000db6 <HAL_I2C_EV_IRQHandler+0x29e>
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d028      	beq.n	8000db6 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8000d64:	6878      	ldr	r0, [r7, #4]
 8000d66:	f000 ff16 	bl	8001b96 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8000d6a:	e024      	b.n	8000db6 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d00d      	beq.n	8000d92 <HAL_I2C_EV_IRQHandler+0x27a>
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d008      	beq.n	8000d92 <HAL_I2C_EV_IRQHandler+0x27a>
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	f003 0304 	and.w	r3, r3, #4
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d103      	bne.n	8000d92 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f000 ff24 	bl	8001bd8 <I2C_SlaveReceive_RXNE>
 8000d90:	e012      	b.n	8000db8 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	f003 0304 	and.w	r3, r3, #4
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d00d      	beq.n	8000db8 <HAL_I2C_EV_IRQHandler+0x2a0>
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d008      	beq.n	8000db8 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f000 ff54 	bl	8001c54 <I2C_SlaveReceive_BTF>
 8000dac:	e004      	b.n	8000db8 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8000dae:	bf00      	nop
 8000db0:	e002      	b.n	8000db8 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8000db2:	bf00      	nop
 8000db4:	e000      	b.n	8000db8 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8000db6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8000db8:	3720      	adds	r7, #32
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b08a      	sub	sp, #40	@ 0x28
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	695b      	ldr	r3, [r3, #20]
 8000dcc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8000de0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8000de2:	6a3b      	ldr	r3, [r7, #32]
 8000de4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d00d      	beq.n	8000e08 <HAL_I2C_ER_IRQHandler+0x4a>
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d008      	beq.n	8000e08 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8000df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000df8:	f043 0301 	orr.w	r3, r3, #1
 8000dfc:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8000e06:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8000e08:	6a3b      	ldr	r3, [r7, #32]
 8000e0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d00d      	beq.n	8000e2e <HAL_I2C_ER_IRQHandler+0x70>
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d008      	beq.n	8000e2e <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8000e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e1e:	f043 0302 	orr.w	r3, r3, #2
 8000e22:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8000e2c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8000e2e:	6a3b      	ldr	r3, [r7, #32]
 8000e30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d03e      	beq.n	8000eb6 <HAL_I2C_ER_IRQHandler+0xf8>
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d039      	beq.n	8000eb6 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8000e42:	7efb      	ldrb	r3, [r7, #27]
 8000e44:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000e4a:	b29b      	uxth	r3, r3
 8000e4c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000e54:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8000e5c:	7ebb      	ldrb	r3, [r7, #26]
 8000e5e:	2b20      	cmp	r3, #32
 8000e60:	d112      	bne.n	8000e88 <HAL_I2C_ER_IRQHandler+0xca>
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d10f      	bne.n	8000e88 <HAL_I2C_ER_IRQHandler+0xca>
 8000e68:	7cfb      	ldrb	r3, [r7, #19]
 8000e6a:	2b21      	cmp	r3, #33	@ 0x21
 8000e6c:	d008      	beq.n	8000e80 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8000e6e:	7cfb      	ldrb	r3, [r7, #19]
 8000e70:	2b29      	cmp	r3, #41	@ 0x29
 8000e72:	d005      	beq.n	8000e80 <HAL_I2C_ER_IRQHandler+0xc2>
 8000e74:	7cfb      	ldrb	r3, [r7, #19]
 8000e76:	2b28      	cmp	r3, #40	@ 0x28
 8000e78:	d106      	bne.n	8000e88 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	2b21      	cmp	r3, #33	@ 0x21
 8000e7e:	d103      	bne.n	8000e88 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	f001 f881 	bl	8001f88 <I2C_Slave_AF>
 8000e86:	e016      	b.n	8000eb6 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8000e90:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8000e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e94:	f043 0304 	orr.w	r3, r3, #4
 8000e98:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8000e9a:	7efb      	ldrb	r3, [r7, #27]
 8000e9c:	2b10      	cmp	r3, #16
 8000e9e:	d002      	beq.n	8000ea6 <HAL_I2C_ER_IRQHandler+0xe8>
 8000ea0:	7efb      	ldrb	r3, [r7, #27]
 8000ea2:	2b40      	cmp	r3, #64	@ 0x40
 8000ea4:	d107      	bne.n	8000eb6 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000eb4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8000eb6:	6a3b      	ldr	r3, [r7, #32]
 8000eb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d00d      	beq.n	8000edc <HAL_I2C_ER_IRQHandler+0x11e>
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d008      	beq.n	8000edc <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8000eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ecc:	f043 0308 	orr.w	r3, r3, #8
 8000ed0:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8000eda:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8000edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d008      	beq.n	8000ef4 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ee8:	431a      	orrs	r2, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f001 f8be 	bl	8002070 <I2C_ITError>
  }
}
 8000ef4:	bf00      	nop
 8000ef6:	3728      	adds	r7, #40	@ 0x28
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8000f04:	bf00      	nop
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8000f2c:	bf00      	nop
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8000f40:	bf00      	nop
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	460b      	mov	r3, r1
 8000f56:	70fb      	strb	r3, [r7, #3]
 8000f58:	4613      	mov	r3, r2
 8000f5a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8000f5c:	bf00      	nop
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8000f70:	bf00      	nop
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8000f84:	bf00      	nop
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8000f98:	bf00      	nop
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000fda:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8000fe2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fe8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d150      	bne.n	8001094 <I2C_MasterTransmit_TXE+0xc8>
 8000ff2:	7bfb      	ldrb	r3, [r7, #15]
 8000ff4:	2b21      	cmp	r3, #33	@ 0x21
 8000ff6:	d14d      	bne.n	8001094 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	2b08      	cmp	r3, #8
 8000ffc:	d01d      	beq.n	800103a <I2C_MasterTransmit_TXE+0x6e>
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	2b20      	cmp	r3, #32
 8001002:	d01a      	beq.n	800103a <I2C_MasterTransmit_TXE+0x6e>
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800100a:	d016      	beq.n	800103a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	685a      	ldr	r2, [r3, #4]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800101a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2211      	movs	r2, #17
 8001020:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2200      	movs	r2, #0
 8001026:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2220      	movs	r2, #32
 800102e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f7ff ff62 	bl	8000efc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001038:	e060      	b.n	80010fc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	685a      	ldr	r2, [r3, #4]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001048:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001058:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2200      	movs	r2, #0
 800105e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2220      	movs	r2, #32
 8001064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800106e:	b2db      	uxtb	r3, r3
 8001070:	2b40      	cmp	r3, #64	@ 0x40
 8001072:	d107      	bne.n	8001084 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2200      	movs	r2, #0
 8001078:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff ff7d 	bl	8000f7c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001082:	e03b      	b.n	80010fc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff ff35 	bl	8000efc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001092:	e033      	b.n	80010fc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001094:	7bfb      	ldrb	r3, [r7, #15]
 8001096:	2b21      	cmp	r3, #33	@ 0x21
 8001098:	d005      	beq.n	80010a6 <I2C_MasterTransmit_TXE+0xda>
 800109a:	7bbb      	ldrb	r3, [r7, #14]
 800109c:	2b40      	cmp	r3, #64	@ 0x40
 800109e:	d12d      	bne.n	80010fc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
 80010a2:	2b22      	cmp	r3, #34	@ 0x22
 80010a4:	d12a      	bne.n	80010fc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d108      	bne.n	80010c2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	685a      	ldr	r2, [r3, #4]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80010be:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80010c0:	e01c      	b.n	80010fc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	2b40      	cmp	r3, #64	@ 0x40
 80010cc:	d103      	bne.n	80010d6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f000 f88e 	bl	80011f0 <I2C_MemoryTransmit_TXE_BTF>
}
 80010d4:	e012      	b.n	80010fc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010da:	781a      	ldrb	r2, [r3, #0]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010e6:	1c5a      	adds	r2, r3, #1
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	3b01      	subs	r3, #1
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80010fa:	e7ff      	b.n	80010fc <I2C_MasterTransmit_TXE+0x130>
 80010fc:	bf00      	nop
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001110:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001118:	b2db      	uxtb	r3, r3
 800111a:	2b21      	cmp	r3, #33	@ 0x21
 800111c:	d164      	bne.n	80011e8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001122:	b29b      	uxth	r3, r3
 8001124:	2b00      	cmp	r3, #0
 8001126:	d012      	beq.n	800114e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800112c:	781a      	ldrb	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001138:	1c5a      	adds	r2, r3, #1
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001142:	b29b      	uxth	r3, r3
 8001144:	3b01      	subs	r3, #1
 8001146:	b29a      	uxth	r2, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800114c:	e04c      	b.n	80011e8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	2b08      	cmp	r3, #8
 8001152:	d01d      	beq.n	8001190 <I2C_MasterTransmit_BTF+0x8c>
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	2b20      	cmp	r3, #32
 8001158:	d01a      	beq.n	8001190 <I2C_MasterTransmit_BTF+0x8c>
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001160:	d016      	beq.n	8001190 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	685a      	ldr	r2, [r3, #4]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001170:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2211      	movs	r2, #17
 8001176:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2200      	movs	r2, #0
 800117c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2220      	movs	r2, #32
 8001184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f7ff feb7 	bl	8000efc <HAL_I2C_MasterTxCpltCallback>
}
 800118e:	e02b      	b.n	80011e8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	685a      	ldr	r2, [r3, #4]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800119e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80011ae:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2200      	movs	r2, #0
 80011b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2220      	movs	r2, #32
 80011ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	2b40      	cmp	r3, #64	@ 0x40
 80011c8:	d107      	bne.n	80011da <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f7ff fed2 	bl	8000f7c <HAL_I2C_MemTxCpltCallback>
}
 80011d8:	e006      	b.n	80011e8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2200      	movs	r2, #0
 80011de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f7ff fe8a 	bl	8000efc <HAL_I2C_MasterTxCpltCallback>
}
 80011e8:	bf00      	nop
 80011ea:	3710      	adds	r7, #16
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80011fe:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001204:	2b00      	cmp	r3, #0
 8001206:	d11d      	bne.n	8001244 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800120c:	2b01      	cmp	r3, #1
 800120e:	d10b      	bne.n	8001228 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001214:	b2da      	uxtb	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001220:	1c9a      	adds	r2, r3, #2
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8001226:	e077      	b.n	8001318 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800122c:	b29b      	uxth	r3, r3
 800122e:	121b      	asrs	r3, r3, #8
 8001230:	b2da      	uxtb	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800123c:	1c5a      	adds	r2, r3, #1
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001242:	e069      	b.n	8001318 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001248:	2b01      	cmp	r3, #1
 800124a:	d10b      	bne.n	8001264 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001250:	b2da      	uxtb	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800125c:	1c5a      	adds	r2, r3, #1
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001262:	e059      	b.n	8001318 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001268:	2b02      	cmp	r3, #2
 800126a:	d152      	bne.n	8001312 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800126c:	7bfb      	ldrb	r3, [r7, #15]
 800126e:	2b22      	cmp	r3, #34	@ 0x22
 8001270:	d10d      	bne.n	800128e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001280:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001286:	1c5a      	adds	r2, r3, #1
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800128c:	e044      	b.n	8001318 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001292:	b29b      	uxth	r3, r3
 8001294:	2b00      	cmp	r3, #0
 8001296:	d015      	beq.n	80012c4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8001298:	7bfb      	ldrb	r3, [r7, #15]
 800129a:	2b21      	cmp	r3, #33	@ 0x21
 800129c:	d112      	bne.n	80012c4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012a2:	781a      	ldrb	r2, [r3, #0]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ae:	1c5a      	adds	r2, r3, #1
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	3b01      	subs	r3, #1
 80012bc:	b29a      	uxth	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80012c2:	e029      	b.n	8001318 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d124      	bne.n	8001318 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80012ce:	7bfb      	ldrb	r3, [r7, #15]
 80012d0:	2b21      	cmp	r3, #33	@ 0x21
 80012d2:	d121      	bne.n	8001318 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	685a      	ldr	r2, [r3, #4]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80012e2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80012f2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2220      	movs	r2, #32
 80012fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f7ff fe36 	bl	8000f7c <HAL_I2C_MemTxCpltCallback>
}
 8001310:	e002      	b.n	8001318 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f7ff fbeb 	bl	8000aee <I2C_Flush_DR>
}
 8001318:	bf00      	nop
 800131a:	3710      	adds	r7, #16
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800132e:	b2db      	uxtb	r3, r3
 8001330:	2b22      	cmp	r3, #34	@ 0x22
 8001332:	f040 80b9 	bne.w	80014a8 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800133a:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001340:	b29b      	uxth	r3, r3
 8001342:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	2b03      	cmp	r3, #3
 8001348:	d921      	bls.n	800138e <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	691a      	ldr	r2, [r3, #16]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001354:	b2d2      	uxtb	r2, r2
 8001356:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800135c:	1c5a      	adds	r2, r3, #1
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001366:	b29b      	uxth	r3, r3
 8001368:	3b01      	subs	r3, #1
 800136a:	b29a      	uxth	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001374:	b29b      	uxth	r3, r3
 8001376:	2b03      	cmp	r3, #3
 8001378:	f040 8096 	bne.w	80014a8 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	685a      	ldr	r2, [r3, #4]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800138a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800138c:	e08c      	b.n	80014a8 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001392:	2b02      	cmp	r3, #2
 8001394:	d07f      	beq.n	8001496 <I2C_MasterReceive_RXNE+0x176>
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d002      	beq.n	80013a2 <I2C_MasterReceive_RXNE+0x82>
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d179      	bne.n	8001496 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f001 f83e 	bl	8002424 <I2C_WaitOnSTOPRequestThroughIT>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d14c      	bne.n	8001448 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80013bc:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	685a      	ldr	r2, [r3, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80013cc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	691a      	ldr	r2, [r3, #16]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013d8:	b2d2      	uxtb	r2, r2
 80013da:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013e0:	1c5a      	adds	r2, r3, #1
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	3b01      	subs	r3, #1
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2220      	movs	r2, #32
 80013f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001402:	b2db      	uxtb	r3, r3
 8001404:	2b40      	cmp	r3, #64	@ 0x40
 8001406:	d10a      	bne.n	800141e <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2200      	movs	r2, #0
 800140c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f7ff fdba 	bl	8000f90 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800141c:	e044      	b.n	80014a8 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	2b08      	cmp	r3, #8
 800142a:	d002      	beq.n	8001432 <I2C_MasterReceive_RXNE+0x112>
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2b20      	cmp	r3, #32
 8001430:	d103      	bne.n	800143a <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	631a      	str	r2, [r3, #48]	@ 0x30
 8001438:	e002      	b.n	8001440 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2212      	movs	r2, #18
 800143e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f7ff fd65 	bl	8000f10 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001446:	e02f      	b.n	80014a8 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	685a      	ldr	r2, [r3, #4]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001456:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	691a      	ldr	r2, [r3, #16]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001462:	b2d2      	uxtb	r2, r2
 8001464:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800146a:	1c5a      	adds	r2, r3, #1
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001474:	b29b      	uxth	r3, r3
 8001476:	3b01      	subs	r3, #1
 8001478:	b29a      	uxth	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2220      	movs	r2, #32
 8001482:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff fd88 	bl	8000fa4 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8001494:	e008      	b.n	80014a8 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	685a      	ldr	r2, [r3, #4]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80014a4:	605a      	str	r2, [r3, #4]
}
 80014a6:	e7ff      	b.n	80014a8 <I2C_MasterReceive_RXNE+0x188>
 80014a8:	bf00      	nop
 80014aa:	3710      	adds	r7, #16
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014bc:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	2b04      	cmp	r3, #4
 80014c6:	d11b      	bne.n	8001500 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	685a      	ldr	r2, [r3, #4]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80014d6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	691a      	ldr	r2, [r3, #16]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014e2:	b2d2      	uxtb	r2, r2
 80014e4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ea:	1c5a      	adds	r2, r3, #1
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	3b01      	subs	r3, #1
 80014f8:	b29a      	uxth	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80014fe:	e0c8      	b.n	8001692 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001504:	b29b      	uxth	r3, r3
 8001506:	2b03      	cmp	r3, #3
 8001508:	d129      	bne.n	800155e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	685a      	ldr	r2, [r3, #4]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001518:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2b04      	cmp	r3, #4
 800151e:	d00a      	beq.n	8001536 <I2C_MasterReceive_BTF+0x86>
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2b02      	cmp	r3, #2
 8001524:	d007      	beq.n	8001536 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001534:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	691a      	ldr	r2, [r3, #16]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001540:	b2d2      	uxtb	r2, r2
 8001542:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001548:	1c5a      	adds	r2, r3, #1
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001552:	b29b      	uxth	r3, r3
 8001554:	3b01      	subs	r3, #1
 8001556:	b29a      	uxth	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800155c:	e099      	b.n	8001692 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001562:	b29b      	uxth	r3, r3
 8001564:	2b02      	cmp	r3, #2
 8001566:	f040 8081 	bne.w	800166c <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d002      	beq.n	8001576 <I2C_MasterReceive_BTF+0xc6>
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2b10      	cmp	r3, #16
 8001574:	d108      	bne.n	8001588 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	e019      	b.n	80015bc <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2b04      	cmp	r3, #4
 800158c:	d002      	beq.n	8001594 <I2C_MasterReceive_BTF+0xe4>
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2b02      	cmp	r3, #2
 8001592:	d108      	bne.n	80015a6 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	e00a      	b.n	80015bc <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2b10      	cmp	r3, #16
 80015aa:	d007      	beq.n	80015bc <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80015ba:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	691a      	ldr	r2, [r3, #16]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015c6:	b2d2      	uxtb	r2, r2
 80015c8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ce:	1c5a      	adds	r2, r3, #1
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015d8:	b29b      	uxth	r3, r3
 80015da:	3b01      	subs	r3, #1
 80015dc:	b29a      	uxth	r2, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	691a      	ldr	r2, [r3, #16]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ec:	b2d2      	uxtb	r2, r2
 80015ee:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015f4:	1c5a      	adds	r2, r3, #1
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015fe:	b29b      	uxth	r3, r3
 8001600:	3b01      	subs	r3, #1
 8001602:	b29a      	uxth	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	685a      	ldr	r2, [r3, #4]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8001616:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2220      	movs	r2, #32
 800161c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001626:	b2db      	uxtb	r3, r3
 8001628:	2b40      	cmp	r3, #64	@ 0x40
 800162a:	d10a      	bne.n	8001642 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f7ff fca8 	bl	8000f90 <HAL_I2C_MemRxCpltCallback>
}
 8001640:	e027      	b.n	8001692 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2b08      	cmp	r3, #8
 800164e:	d002      	beq.n	8001656 <I2C_MasterReceive_BTF+0x1a6>
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2b20      	cmp	r3, #32
 8001654:	d103      	bne.n	800165e <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	631a      	str	r2, [r3, #48]	@ 0x30
 800165c:	e002      	b.n	8001664 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2212      	movs	r2, #18
 8001662:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f7ff fc53 	bl	8000f10 <HAL_I2C_MasterRxCpltCallback>
}
 800166a:	e012      	b.n	8001692 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	691a      	ldr	r2, [r3, #16]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001676:	b2d2      	uxtb	r2, r2
 8001678:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800167e:	1c5a      	adds	r2, r3, #1
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001688:	b29b      	uxth	r3, r3
 800168a:	3b01      	subs	r3, #1
 800168c:	b29a      	uxth	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8001692:	bf00      	nop
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800169a:	b480      	push	{r7}
 800169c:	b083      	sub	sp, #12
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	2b40      	cmp	r3, #64	@ 0x40
 80016ac:	d117      	bne.n	80016de <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d109      	bne.n	80016ca <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	461a      	mov	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80016c6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80016c8:	e067      	b.n	800179a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	611a      	str	r2, [r3, #16]
}
 80016dc:	e05d      	b.n	800179a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80016e6:	d133      	bne.n	8001750 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	2b21      	cmp	r3, #33	@ 0x21
 80016f2:	d109      	bne.n	8001708 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	461a      	mov	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001704:	611a      	str	r2, [r3, #16]
 8001706:	e008      	b.n	800171a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800170c:	b2db      	uxtb	r3, r3
 800170e:	f043 0301 	orr.w	r3, r3, #1
 8001712:	b2da      	uxtb	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800171e:	2b00      	cmp	r3, #0
 8001720:	d004      	beq.n	800172c <I2C_Master_SB+0x92>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001726:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001728:	2b00      	cmp	r3, #0
 800172a:	d108      	bne.n	800173e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001730:	2b00      	cmp	r3, #0
 8001732:	d032      	beq.n	800179a <I2C_Master_SB+0x100>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001738:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800173a:	2b00      	cmp	r3, #0
 800173c:	d02d      	beq.n	800179a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	685a      	ldr	r2, [r3, #4]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800174c:	605a      	str	r2, [r3, #4]
}
 800174e:	e024      	b.n	800179a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001754:	2b00      	cmp	r3, #0
 8001756:	d10e      	bne.n	8001776 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800175c:	b29b      	uxth	r3, r3
 800175e:	11db      	asrs	r3, r3, #7
 8001760:	b2db      	uxtb	r3, r3
 8001762:	f003 0306 	and.w	r3, r3, #6
 8001766:	b2db      	uxtb	r3, r3
 8001768:	f063 030f 	orn	r3, r3, #15
 800176c:	b2da      	uxtb	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	611a      	str	r2, [r3, #16]
}
 8001774:	e011      	b.n	800179a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800177a:	2b01      	cmp	r3, #1
 800177c:	d10d      	bne.n	800179a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001782:	b29b      	uxth	r3, r3
 8001784:	11db      	asrs	r3, r3, #7
 8001786:	b2db      	uxtb	r3, r3
 8001788:	f003 0306 	and.w	r3, r3, #6
 800178c:	b2db      	uxtb	r3, r3
 800178e:	f063 030e 	orn	r3, r3, #14
 8001792:	b2da      	uxtb	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	611a      	str	r2, [r3, #16]
}
 800179a:	bf00      	nop
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80017a6:	b480      	push	{r7}
 80017a8:	b083      	sub	sp, #12
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017b2:	b2da      	uxtb	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d004      	beq.n	80017cc <I2C_Master_ADD10+0x26>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d108      	bne.n	80017de <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d00c      	beq.n	80017ee <I2C_Master_ADD10+0x48>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d007      	beq.n	80017ee <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	685a      	ldr	r2, [r3, #4]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80017ec:	605a      	str	r2, [r3, #4]
  }
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80017fa:	b480      	push	{r7}
 80017fc:	b091      	sub	sp, #68	@ 0x44
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001808:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001810:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001816:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800181e:	b2db      	uxtb	r3, r3
 8001820:	2b22      	cmp	r3, #34	@ 0x22
 8001822:	f040 8169 	bne.w	8001af8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800182a:	2b00      	cmp	r3, #0
 800182c:	d10f      	bne.n	800184e <I2C_Master_ADDR+0x54>
 800182e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001832:	2b40      	cmp	r3, #64	@ 0x40
 8001834:	d10b      	bne.n	800184e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001836:	2300      	movs	r3, #0
 8001838:	633b      	str	r3, [r7, #48]	@ 0x30
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	695b      	ldr	r3, [r3, #20]
 8001840:	633b      	str	r3, [r7, #48]	@ 0x30
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	633b      	str	r3, [r7, #48]	@ 0x30
 800184a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800184c:	e160      	b.n	8001b10 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001852:	2b00      	cmp	r3, #0
 8001854:	d11d      	bne.n	8001892 <I2C_Master_ADDR+0x98>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	691b      	ldr	r3, [r3, #16]
 800185a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800185e:	d118      	bne.n	8001892 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001860:	2300      	movs	r3, #0
 8001862:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	695b      	ldr	r3, [r3, #20]
 800186a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	699b      	ldr	r3, [r3, #24]
 8001872:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001884:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800188a:	1c5a      	adds	r2, r3, #1
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	651a      	str	r2, [r3, #80]	@ 0x50
 8001890:	e13e      	b.n	8001b10 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001896:	b29b      	uxth	r3, r3
 8001898:	2b00      	cmp	r3, #0
 800189a:	d113      	bne.n	80018c4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800189c:	2300      	movs	r3, #0
 800189e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	695b      	ldr	r3, [r3, #20]
 80018a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	e115      	b.n	8001af0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	f040 808a 	bne.w	80019e4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80018d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018d2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80018d6:	d137      	bne.n	8001948 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80018e6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80018f6:	d113      	bne.n	8001920 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001906:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001908:	2300      	movs	r3, #0
 800190a:	627b      	str	r3, [r7, #36]	@ 0x24
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	695b      	ldr	r3, [r3, #20]
 8001912:	627b      	str	r3, [r7, #36]	@ 0x24
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	627b      	str	r3, [r7, #36]	@ 0x24
 800191c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800191e:	e0e7      	b.n	8001af0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001920:	2300      	movs	r3, #0
 8001922:	623b      	str	r3, [r7, #32]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	695b      	ldr	r3, [r3, #20]
 800192a:	623b      	str	r3, [r7, #32]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	699b      	ldr	r3, [r3, #24]
 8001932:	623b      	str	r3, [r7, #32]
 8001934:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	e0d3      	b.n	8001af0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8001948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800194a:	2b08      	cmp	r3, #8
 800194c:	d02e      	beq.n	80019ac <I2C_Master_ADDR+0x1b2>
 800194e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001950:	2b20      	cmp	r3, #32
 8001952:	d02b      	beq.n	80019ac <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8001954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001956:	2b12      	cmp	r3, #18
 8001958:	d102      	bne.n	8001960 <I2C_Master_ADDR+0x166>
 800195a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800195c:	2b01      	cmp	r3, #1
 800195e:	d125      	bne.n	80019ac <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8001960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001962:	2b04      	cmp	r3, #4
 8001964:	d00e      	beq.n	8001984 <I2C_Master_ADDR+0x18a>
 8001966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001968:	2b02      	cmp	r3, #2
 800196a:	d00b      	beq.n	8001984 <I2C_Master_ADDR+0x18a>
 800196c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800196e:	2b10      	cmp	r3, #16
 8001970:	d008      	beq.n	8001984 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	e007      	b.n	8001994 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001992:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001994:	2300      	movs	r3, #0
 8001996:	61fb      	str	r3, [r7, #28]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	695b      	ldr	r3, [r3, #20]
 800199e:	61fb      	str	r3, [r7, #28]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	699b      	ldr	r3, [r3, #24]
 80019a6:	61fb      	str	r3, [r7, #28]
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	e0a1      	b.n	8001af0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80019ba:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019bc:	2300      	movs	r3, #0
 80019be:	61bb      	str	r3, [r7, #24]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	61bb      	str	r3, [r7, #24]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	61bb      	str	r3, [r7, #24]
 80019d0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	e085      	b.n	8001af0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d14d      	bne.n	8001a8a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80019ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019f0:	2b04      	cmp	r3, #4
 80019f2:	d016      	beq.n	8001a22 <I2C_Master_ADDR+0x228>
 80019f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d013      	beq.n	8001a22 <I2C_Master_ADDR+0x228>
 80019fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019fc:	2b10      	cmp	r3, #16
 80019fe:	d010      	beq.n	8001a22 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a0e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	e007      	b.n	8001a32 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001a30:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001a40:	d117      	bne.n	8001a72 <I2C_Master_ADDR+0x278>
 8001a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a44:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001a48:	d00b      	beq.n	8001a62 <I2C_Master_ADDR+0x268>
 8001a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d008      	beq.n	8001a62 <I2C_Master_ADDR+0x268>
 8001a50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a52:	2b08      	cmp	r3, #8
 8001a54:	d005      	beq.n	8001a62 <I2C_Master_ADDR+0x268>
 8001a56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a58:	2b10      	cmp	r3, #16
 8001a5a:	d002      	beq.n	8001a62 <I2C_Master_ADDR+0x268>
 8001a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a5e:	2b20      	cmp	r3, #32
 8001a60:	d107      	bne.n	8001a72 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	685a      	ldr	r2, [r3, #4]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001a70:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a72:	2300      	movs	r3, #0
 8001a74:	617b      	str	r3, [r7, #20]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	695b      	ldr	r3, [r3, #20]
 8001a7c:	617b      	str	r3, [r7, #20]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	617b      	str	r3, [r7, #20]
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	e032      	b.n	8001af0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001a98:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001aa4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001aa8:	d117      	bne.n	8001ada <I2C_Master_ADDR+0x2e0>
 8001aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001aac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001ab0:	d00b      	beq.n	8001aca <I2C_Master_ADDR+0x2d0>
 8001ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d008      	beq.n	8001aca <I2C_Master_ADDR+0x2d0>
 8001ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001aba:	2b08      	cmp	r3, #8
 8001abc:	d005      	beq.n	8001aca <I2C_Master_ADDR+0x2d0>
 8001abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ac0:	2b10      	cmp	r3, #16
 8001ac2:	d002      	beq.n	8001aca <I2C_Master_ADDR+0x2d0>
 8001ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ac6:	2b20      	cmp	r3, #32
 8001ac8:	d107      	bne.n	8001ada <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	685a      	ldr	r2, [r3, #4]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001ad8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ada:	2300      	movs	r3, #0
 8001adc:	613b      	str	r3, [r7, #16]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	695b      	ldr	r3, [r3, #20]
 8001ae4:	613b      	str	r3, [r7, #16]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	613b      	str	r3, [r7, #16]
 8001aee:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8001af6:	e00b      	b.n	8001b10 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001af8:	2300      	movs	r3, #0
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	695b      	ldr	r3, [r3, #20]
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
}
 8001b0e:	e7ff      	b.n	8001b10 <I2C_Master_ADDR+0x316>
 8001b10:	bf00      	nop
 8001b12:	3744      	adds	r7, #68	@ 0x44
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b2a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d02b      	beq.n	8001b8e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b3a:	781a      	ldrb	r2, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b46:	1c5a      	adds	r2, r3, #1
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	3b01      	subs	r3, #1
 8001b54:	b29a      	uxth	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d114      	bne.n	8001b8e <I2C_SlaveTransmit_TXE+0x72>
 8001b64:	7bfb      	ldrb	r3, [r7, #15]
 8001b66:	2b29      	cmp	r3, #41	@ 0x29
 8001b68:	d111      	bne.n	8001b8e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	685a      	ldr	r2, [r3, #4]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b78:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2221      	movs	r2, #33	@ 0x21
 8001b7e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2228      	movs	r2, #40	@ 0x28
 8001b84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f7ff f9cb 	bl	8000f24 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8001b8e:	bf00      	nop
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001b96:	b480      	push	{r7}
 8001b98:	b083      	sub	sp, #12
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d011      	beq.n	8001bcc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bac:	781a      	ldrb	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb8:	1c5a      	adds	r2, r3, #1
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001be6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d02c      	beq.n	8001c4c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	691a      	ldr	r2, [r3, #16]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bfc:	b2d2      	uxtb	r2, r2
 8001bfe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c04:	1c5a      	adds	r2, r3, #1
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	3b01      	subs	r3, #1
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d114      	bne.n	8001c4c <I2C_SlaveReceive_RXNE+0x74>
 8001c22:	7bfb      	ldrb	r3, [r7, #15]
 8001c24:	2b2a      	cmp	r3, #42	@ 0x2a
 8001c26:	d111      	bne.n	8001c4c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	685a      	ldr	r2, [r3, #4]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c36:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2222      	movs	r2, #34	@ 0x22
 8001c3c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2228      	movs	r2, #40	@ 0x28
 8001c42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f7ff f976 	bl	8000f38 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8001c4c:	bf00      	nop
 8001c4e:	3710      	adds	r7, #16
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d012      	beq.n	8001c8c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	691a      	ldr	r2, [r3, #16]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c70:	b2d2      	uxtb	r2, r2
 8001c72:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c78:	1c5a      	adds	r2, r3, #1
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	3b01      	subs	r3, #1
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8001cb2:	2b28      	cmp	r3, #40	@ 0x28
 8001cb4:	d125      	bne.n	8001d02 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	685a      	ldr	r2, [r3, #4]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001cc4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	f003 0304 	and.w	r3, r3, #4
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d101      	bne.n	8001cd4 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d103      	bne.n	8001ce6 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	81bb      	strh	r3, [r7, #12]
 8001ce4:	e002      	b.n	8001cec <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8001cf4:	89ba      	ldrh	r2, [r7, #12]
 8001cf6:	7bfb      	ldrb	r3, [r7, #15]
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f7ff f926 	bl	8000f4c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001d00:	e00e      	b.n	8001d20 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d02:	2300      	movs	r3, #0
 8001d04:	60bb      	str	r3, [r7, #8]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	695b      	ldr	r3, [r3, #20]
 8001d0c:	60bb      	str	r3, [r7, #8]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	60bb      	str	r3, [r7, #8]
 8001d16:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8001d20:	bf00      	nop
 8001d22:	3710      	adds	r7, #16
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d36:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001d46:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8001d48:	2300      	movs	r3, #0
 8001d4a:	60bb      	str	r3, [r7, #8]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	695b      	ldr	r3, [r3, #20]
 8001d52:	60bb      	str	r3, [r7, #8]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f042 0201 	orr.w	r2, r2, #1
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d74:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001d84:	d172      	bne.n	8001e6c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001d86:	7bfb      	ldrb	r3, [r7, #15]
 8001d88:	2b22      	cmp	r3, #34	@ 0x22
 8001d8a:	d002      	beq.n	8001d92 <I2C_Slave_STOPF+0x6a>
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
 8001d8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001d90:	d135      	bne.n	8001dfe <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d005      	beq.n	8001db6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dae:	f043 0204 	orr.w	r2, r3, #4
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	685a      	ldr	r2, [r3, #4]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001dc4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7fe fe81 	bl	8000ad2 <HAL_DMA_GetState>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d049      	beq.n	8001e6a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dda:	4a69      	ldr	r2, [pc, #420]	@ (8001f80 <I2C_Slave_STOPF+0x258>)
 8001ddc:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7fe fe53 	bl	8000a8e <HAL_DMA_Abort_IT>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d03d      	beq.n	8001e6a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001df2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001df8:	4610      	mov	r0, r2
 8001dfa:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001dfc:	e035      	b.n	8001e6a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	b29a      	uxth	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d005      	beq.n	8001e22 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1a:	f043 0204 	orr.w	r2, r3, #4
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	685a      	ldr	r2, [r3, #4]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e30:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7fe fe4b 	bl	8000ad2 <HAL_DMA_GetState>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d014      	beq.n	8001e6c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e46:	4a4e      	ldr	r2, [pc, #312]	@ (8001f80 <I2C_Slave_STOPF+0x258>)
 8001e48:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7fe fe1d 	bl	8000a8e <HAL_DMA_Abort_IT>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d008      	beq.n	8001e6c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001e64:	4610      	mov	r0, r2
 8001e66:	4798      	blx	r3
 8001e68:	e000      	b.n	8001e6c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001e6a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d03e      	beq.n	8001ef4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	695b      	ldr	r3, [r3, #20]
 8001e7c:	f003 0304 	and.w	r3, r3, #4
 8001e80:	2b04      	cmp	r3, #4
 8001e82:	d112      	bne.n	8001eaa <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	691a      	ldr	r2, [r3, #16]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e8e:	b2d2      	uxtb	r2, r2
 8001e90:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e96:	1c5a      	adds	r2, r3, #1
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	695b      	ldr	r3, [r3, #20]
 8001eb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001eb4:	2b40      	cmp	r3, #64	@ 0x40
 8001eb6:	d112      	bne.n	8001ede <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	691a      	ldr	r2, [r3, #16]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec2:	b2d2      	uxtb	r2, r2
 8001ec4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eca:	1c5a      	adds	r2, r3, #1
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d005      	beq.n	8001ef4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eec:	f043 0204 	orr.w	r2, r3, #4
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d003      	beq.n	8001f04 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f000 f8b7 	bl	8002070 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8001f02:	e039      	b.n	8001f78 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001f04:	7bfb      	ldrb	r3, [r7, #15]
 8001f06:	2b2a      	cmp	r3, #42	@ 0x2a
 8001f08:	d109      	bne.n	8001f1e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2228      	movs	r2, #40	@ 0x28
 8001f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f7ff f80d 	bl	8000f38 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b28      	cmp	r3, #40	@ 0x28
 8001f28:	d111      	bne.n	8001f4e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a15      	ldr	r2, [pc, #84]	@ (8001f84 <I2C_Slave_STOPF+0x25c>)
 8001f2e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2220      	movs	r2, #32
 8001f3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f7ff f80e 	bl	8000f68 <HAL_I2C_ListenCpltCallback>
}
 8001f4c:	e014      	b.n	8001f78 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f52:	2b22      	cmp	r3, #34	@ 0x22
 8001f54:	d002      	beq.n	8001f5c <I2C_Slave_STOPF+0x234>
 8001f56:	7bfb      	ldrb	r3, [r7, #15]
 8001f58:	2b22      	cmp	r3, #34	@ 0x22
 8001f5a:	d10d      	bne.n	8001f78 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2220      	movs	r2, #32
 8001f66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f7fe ffe0 	bl	8000f38 <HAL_I2C_SlaveRxCpltCallback>
}
 8001f78:	bf00      	nop
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	080022d5 	.word	0x080022d5
 8001f84:	ffff0000 	.word	0xffff0000

08001f88 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f96:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f9c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	2b08      	cmp	r3, #8
 8001fa2:	d002      	beq.n	8001faa <I2C_Slave_AF+0x22>
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	2b20      	cmp	r3, #32
 8001fa8:	d129      	bne.n	8001ffe <I2C_Slave_AF+0x76>
 8001faa:	7bfb      	ldrb	r3, [r7, #15]
 8001fac:	2b28      	cmp	r3, #40	@ 0x28
 8001fae:	d126      	bne.n	8001ffe <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a2e      	ldr	r2, [pc, #184]	@ (800206c <I2C_Slave_AF+0xe4>)
 8001fb4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	685a      	ldr	r2, [r3, #4]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001fc4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001fce:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001fde:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2220      	movs	r2, #32
 8001fea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f7fe ffb6 	bl	8000f68 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8001ffc:	e031      	b.n	8002062 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001ffe:	7bfb      	ldrb	r3, [r7, #15]
 8002000:	2b21      	cmp	r3, #33	@ 0x21
 8002002:	d129      	bne.n	8002058 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a19      	ldr	r2, [pc, #100]	@ (800206c <I2C_Slave_AF+0xe4>)
 8002008:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2221      	movs	r2, #33	@ 0x21
 800200e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2220      	movs	r2, #32
 8002014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	685a      	ldr	r2, [r3, #4]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800202e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002038:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002048:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7fe fd4f 	bl	8000aee <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f7fe ff67 	bl	8000f24 <HAL_I2C_SlaveTxCpltCallback>
}
 8002056:	e004      	b.n	8002062 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002060:	615a      	str	r2, [r3, #20]
}
 8002062:	bf00      	nop
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	ffff0000 	.word	0xffff0000

08002070 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800207e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002086:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002088:	7bbb      	ldrb	r3, [r7, #14]
 800208a:	2b10      	cmp	r3, #16
 800208c:	d002      	beq.n	8002094 <I2C_ITError+0x24>
 800208e:	7bbb      	ldrb	r3, [r7, #14]
 8002090:	2b40      	cmp	r3, #64	@ 0x40
 8002092:	d10a      	bne.n	80020aa <I2C_ITError+0x3a>
 8002094:	7bfb      	ldrb	r3, [r7, #15]
 8002096:	2b22      	cmp	r3, #34	@ 0x22
 8002098:	d107      	bne.n	80020aa <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020a8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80020aa:	7bfb      	ldrb	r3, [r7, #15]
 80020ac:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80020b0:	2b28      	cmp	r3, #40	@ 0x28
 80020b2:	d107      	bne.n	80020c4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2228      	movs	r2, #40	@ 0x28
 80020be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80020c2:	e015      	b.n	80020f0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80020d2:	d00a      	beq.n	80020ea <I2C_ITError+0x7a>
 80020d4:	7bfb      	ldrb	r3, [r7, #15]
 80020d6:	2b60      	cmp	r3, #96	@ 0x60
 80020d8:	d007      	beq.n	80020ea <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2220      	movs	r2, #32
 80020de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80020fe:	d162      	bne.n	80021c6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	685a      	ldr	r2, [r3, #4]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800210e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002114:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b01      	cmp	r3, #1
 800211c:	d020      	beq.n	8002160 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002122:	4a6a      	ldr	r2, [pc, #424]	@ (80022cc <I2C_ITError+0x25c>)
 8002124:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800212a:	4618      	mov	r0, r3
 800212c:	f7fe fcaf 	bl	8000a8e <HAL_DMA_Abort_IT>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	f000 8089 	beq.w	800224a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 0201 	bic.w	r2, r2, #1
 8002146:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2220      	movs	r2, #32
 800214c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002154:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800215a:	4610      	mov	r0, r2
 800215c:	4798      	blx	r3
 800215e:	e074      	b.n	800224a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002164:	4a59      	ldr	r2, [pc, #356]	@ (80022cc <I2C_ITError+0x25c>)
 8002166:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800216c:	4618      	mov	r0, r3
 800216e:	f7fe fc8e 	bl	8000a8e <HAL_DMA_Abort_IT>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d068      	beq.n	800224a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	695b      	ldr	r3, [r3, #20]
 800217e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002182:	2b40      	cmp	r3, #64	@ 0x40
 8002184:	d10b      	bne.n	800219e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	691a      	ldr	r2, [r3, #16]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002190:	b2d2      	uxtb	r2, r2
 8002192:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002198:	1c5a      	adds	r2, r3, #1
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f022 0201 	bic.w	r2, r2, #1
 80021ac:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2220      	movs	r2, #32
 80021b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80021c0:	4610      	mov	r0, r2
 80021c2:	4798      	blx	r3
 80021c4:	e041      	b.n	800224a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b60      	cmp	r3, #96	@ 0x60
 80021d0:	d125      	bne.n	800221e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2220      	movs	r2, #32
 80021d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	695b      	ldr	r3, [r3, #20]
 80021e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021ea:	2b40      	cmp	r3, #64	@ 0x40
 80021ec:	d10b      	bne.n	8002206 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	691a      	ldr	r2, [r3, #16]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f8:	b2d2      	uxtb	r2, r2
 80021fa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002200:	1c5a      	adds	r2, r3, #1
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f022 0201 	bic.w	r2, r2, #1
 8002214:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f7fe fece 	bl	8000fb8 <HAL_I2C_AbortCpltCallback>
 800221c:	e015      	b.n	800224a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	695b      	ldr	r3, [r3, #20]
 8002224:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002228:	2b40      	cmp	r3, #64	@ 0x40
 800222a:	d10b      	bne.n	8002244 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	691a      	ldr	r2, [r3, #16]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002236:	b2d2      	uxtb	r2, r2
 8002238:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800223e:	1c5a      	adds	r2, r3, #1
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f7fe fead 	bl	8000fa4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b00      	cmp	r3, #0
 8002258:	d10e      	bne.n	8002278 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002260:	2b00      	cmp	r3, #0
 8002262:	d109      	bne.n	8002278 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800226a:	2b00      	cmp	r3, #0
 800226c:	d104      	bne.n	8002278 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002274:	2b00      	cmp	r3, #0
 8002276:	d007      	beq.n	8002288 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	685a      	ldr	r2, [r3, #4]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002286:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800228e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	2b04      	cmp	r3, #4
 800229a:	d113      	bne.n	80022c4 <I2C_ITError+0x254>
 800229c:	7bfb      	ldrb	r3, [r7, #15]
 800229e:	2b28      	cmp	r3, #40	@ 0x28
 80022a0:	d110      	bne.n	80022c4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a0a      	ldr	r2, [pc, #40]	@ (80022d0 <I2C_ITError+0x260>)
 80022a6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2220      	movs	r2, #32
 80022b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7fe fe52 	bl	8000f68 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80022c4:	bf00      	nop
 80022c6:	3710      	adds	r7, #16
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	080022d5 	.word	0x080022d5
 80022d0:	ffff0000 	.word	0xffff0000

080022d4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80022dc:	2300      	movs	r3, #0
 80022de:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022e4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022ec:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80022ee:	4b4b      	ldr	r3, [pc, #300]	@ (800241c <I2C_DMAAbort+0x148>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	08db      	lsrs	r3, r3, #3
 80022f4:	4a4a      	ldr	r2, [pc, #296]	@ (8002420 <I2C_DMAAbort+0x14c>)
 80022f6:	fba2 2303 	umull	r2, r3, r2, r3
 80022fa:	0a1a      	lsrs	r2, r3, #8
 80022fc:	4613      	mov	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	4413      	add	r3, r2
 8002302:	00da      	lsls	r2, r3, #3
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d106      	bne.n	800231c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002312:	f043 0220 	orr.w	r2, r3, #32
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800231a:	e00a      	b.n	8002332 <I2C_DMAAbort+0x5e>
    }
    count--;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	3b01      	subs	r3, #1
 8002320:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800232c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002330:	d0ea      	beq.n	8002308 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002336:	2b00      	cmp	r3, #0
 8002338:	d003      	beq.n	8002342 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800233e:	2200      	movs	r2, #0
 8002340:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002346:	2b00      	cmp	r3, #0
 8002348:	d003      	beq.n	8002352 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800234e:	2200      	movs	r2, #0
 8002350:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002360:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	2200      	movs	r2, #0
 8002366:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800236c:	2b00      	cmp	r3, #0
 800236e:	d003      	beq.n	8002378 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002374:	2200      	movs	r2, #0
 8002376:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800237c:	2b00      	cmp	r3, #0
 800237e:	d003      	beq.n	8002388 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002384:	2200      	movs	r2, #0
 8002386:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f022 0201 	bic.w	r2, r2, #1
 8002396:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b60      	cmp	r3, #96	@ 0x60
 80023a2:	d10e      	bne.n	80023c2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	2220      	movs	r2, #32
 80023a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	2200      	movs	r2, #0
 80023b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80023ba:	6978      	ldr	r0, [r7, #20]
 80023bc:	f7fe fdfc 	bl	8000fb8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80023c0:	e027      	b.n	8002412 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80023c2:	7cfb      	ldrb	r3, [r7, #19]
 80023c4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80023c8:	2b28      	cmp	r3, #40	@ 0x28
 80023ca:	d117      	bne.n	80023fc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f042 0201 	orr.w	r2, r2, #1
 80023da:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80023ea:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	2200      	movs	r2, #0
 80023f0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	2228      	movs	r2, #40	@ 0x28
 80023f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80023fa:	e007      	b.n	800240c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	2220      	movs	r2, #32
 8002400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800240c:	6978      	ldr	r0, [r7, #20]
 800240e:	f7fe fdc9 	bl	8000fa4 <HAL_I2C_ErrorCallback>
}
 8002412:	bf00      	nop
 8002414:	3718      	adds	r7, #24
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	20000000 	.word	0x20000000
 8002420:	14f8b589 	.word	0x14f8b589

08002424 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800242c:	2300      	movs	r3, #0
 800242e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8002430:	4b13      	ldr	r3, [pc, #76]	@ (8002480 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	08db      	lsrs	r3, r3, #3
 8002436:	4a13      	ldr	r2, [pc, #76]	@ (8002484 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8002438:	fba2 2303 	umull	r2, r3, r2, r3
 800243c:	0a1a      	lsrs	r2, r3, #8
 800243e:	4613      	mov	r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	4413      	add	r3, r2
 8002444:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	3b01      	subs	r3, #1
 800244a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d107      	bne.n	8002462 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002456:	f043 0220 	orr.w	r2, r3, #32
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e008      	b.n	8002474 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800246c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002470:	d0e9      	beq.n	8002446 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	3714      	adds	r7, #20
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	20000000 	.word	0x20000000
 8002484:	14f8b589 	.word	0x14f8b589

08002488 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002494:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8002498:	d103      	bne.n	80024a2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2201      	movs	r2, #1
 800249e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80024a0:	e007      	b.n	80024b2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a6:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80024aa:	d102      	bne.n	80024b2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2208      	movs	r2, #8
 80024b0:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80024b2:	bf00      	nop
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
	...

080024c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b0ba      	sub	sp, #232	@ 0xe8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80024e6:	2300      	movs	r3, #0
 80024e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80024ec:	2300      	movs	r3, #0
 80024ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80024f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024f6:	f003 030f 	and.w	r3, r3, #15
 80024fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80024fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002502:	2b00      	cmp	r3, #0
 8002504:	d10f      	bne.n	8002526 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800250a:	f003 0320 	and.w	r3, r3, #32
 800250e:	2b00      	cmp	r3, #0
 8002510:	d009      	beq.n	8002526 <HAL_UART_IRQHandler+0x66>
 8002512:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002516:	f003 0320 	and.w	r3, r3, #32
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 fb69 	bl	8002bf6 <UART_Receive_IT>
      return;
 8002524:	e25b      	b.n	80029de <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002526:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800252a:	2b00      	cmp	r3, #0
 800252c:	f000 80de 	beq.w	80026ec <HAL_UART_IRQHandler+0x22c>
 8002530:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	2b00      	cmp	r3, #0
 800253a:	d106      	bne.n	800254a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800253c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002540:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002544:	2b00      	cmp	r3, #0
 8002546:	f000 80d1 	beq.w	80026ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800254a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00b      	beq.n	800256e <HAL_UART_IRQHandler+0xae>
 8002556:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800255a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800255e:	2b00      	cmp	r3, #0
 8002560:	d005      	beq.n	800256e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002566:	f043 0201 	orr.w	r2, r3, #1
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800256e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002572:	f003 0304 	and.w	r3, r3, #4
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00b      	beq.n	8002592 <HAL_UART_IRQHandler+0xd2>
 800257a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b00      	cmp	r3, #0
 8002584:	d005      	beq.n	8002592 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800258a:	f043 0202 	orr.w	r2, r3, #2
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00b      	beq.n	80025b6 <HAL_UART_IRQHandler+0xf6>
 800259e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d005      	beq.n	80025b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ae:	f043 0204 	orr.w	r2, r3, #4
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80025b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025ba:	f003 0308 	and.w	r3, r3, #8
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d011      	beq.n	80025e6 <HAL_UART_IRQHandler+0x126>
 80025c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80025c6:	f003 0320 	and.w	r3, r3, #32
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d105      	bne.n	80025da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80025ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d005      	beq.n	80025e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025de:	f043 0208 	orr.w	r2, r3, #8
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f000 81f2 	beq.w	80029d4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025f4:	f003 0320 	and.w	r3, r3, #32
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d008      	beq.n	800260e <HAL_UART_IRQHandler+0x14e>
 80025fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002600:	f003 0320 	and.w	r3, r3, #32
 8002604:	2b00      	cmp	r3, #0
 8002606:	d002      	beq.n	800260e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f000 faf4 	bl	8002bf6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	695b      	ldr	r3, [r3, #20]
 8002614:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002618:	2b40      	cmp	r3, #64	@ 0x40
 800261a:	bf0c      	ite	eq
 800261c:	2301      	moveq	r3, #1
 800261e:	2300      	movne	r3, #0
 8002620:	b2db      	uxtb	r3, r3
 8002622:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800262a:	f003 0308 	and.w	r3, r3, #8
 800262e:	2b00      	cmp	r3, #0
 8002630:	d103      	bne.n	800263a <HAL_UART_IRQHandler+0x17a>
 8002632:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002636:	2b00      	cmp	r3, #0
 8002638:	d04f      	beq.n	80026da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 f9fc 	bl	8002a38 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800264a:	2b40      	cmp	r3, #64	@ 0x40
 800264c:	d141      	bne.n	80026d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	3314      	adds	r3, #20
 8002654:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002658:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800265c:	e853 3f00 	ldrex	r3, [r3]
 8002660:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002664:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002668:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800266c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	3314      	adds	r3, #20
 8002676:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800267a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800267e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002682:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002686:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800268a:	e841 2300 	strex	r3, r2, [r1]
 800268e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002692:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1d9      	bne.n	800264e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d013      	beq.n	80026ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026a6:	4a7e      	ldr	r2, [pc, #504]	@ (80028a0 <HAL_UART_IRQHandler+0x3e0>)
 80026a8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7fe f9ed 	bl	8000a8e <HAL_DMA_Abort_IT>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d016      	beq.n	80026e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80026c4:	4610      	mov	r0, r2
 80026c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026c8:	e00e      	b.n	80026e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 f99e 	bl	8002a0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026d0:	e00a      	b.n	80026e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 f99a 	bl	8002a0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026d8:	e006      	b.n	80026e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 f996 	bl	8002a0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80026e6:	e175      	b.n	80029d4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026e8:	bf00      	nop
    return;
 80026ea:	e173      	b.n	80029d4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	f040 814f 	bne.w	8002994 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80026f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026fa:	f003 0310 	and.w	r3, r3, #16
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f000 8148 	beq.w	8002994 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002708:	f003 0310 	and.w	r3, r3, #16
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 8141 	beq.w	8002994 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002712:	2300      	movs	r3, #0
 8002714:	60bb      	str	r3, [r7, #8]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	60bb      	str	r3, [r7, #8]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	60bb      	str	r3, [r7, #8]
 8002726:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002732:	2b40      	cmp	r3, #64	@ 0x40
 8002734:	f040 80b6 	bne.w	80028a4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002744:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002748:	2b00      	cmp	r3, #0
 800274a:	f000 8145 	beq.w	80029d8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002752:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002756:	429a      	cmp	r2, r3
 8002758:	f080 813e 	bcs.w	80029d8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002762:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002768:	69db      	ldr	r3, [r3, #28]
 800276a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800276e:	f000 8088 	beq.w	8002882 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	330c      	adds	r3, #12
 8002778:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800277c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002780:	e853 3f00 	ldrex	r3, [r3]
 8002784:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002788:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800278c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002790:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	330c      	adds	r3, #12
 800279a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800279e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80027a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80027aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80027ae:	e841 2300 	strex	r3, r2, [r1]
 80027b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80027b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1d9      	bne.n	8002772 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	3314      	adds	r3, #20
 80027c4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027c8:	e853 3f00 	ldrex	r3, [r3]
 80027cc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80027ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80027d0:	f023 0301 	bic.w	r3, r3, #1
 80027d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	3314      	adds	r3, #20
 80027de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80027e2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80027e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027e8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80027ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80027ee:	e841 2300 	strex	r3, r2, [r1]
 80027f2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80027f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1e1      	bne.n	80027be <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	3314      	adds	r3, #20
 8002800:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002802:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002804:	e853 3f00 	ldrex	r3, [r3]
 8002808:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800280a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800280c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002810:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	3314      	adds	r3, #20
 800281a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800281e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002820:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002822:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002824:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002826:	e841 2300 	strex	r3, r2, [r1]
 800282a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800282c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1e3      	bne.n	80027fa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2220      	movs	r2, #32
 8002836:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	330c      	adds	r3, #12
 8002846:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002848:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800284a:	e853 3f00 	ldrex	r3, [r3]
 800284e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002850:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002852:	f023 0310 	bic.w	r3, r3, #16
 8002856:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	330c      	adds	r3, #12
 8002860:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002864:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002866:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002868:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800286a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800286c:	e841 2300 	strex	r3, r2, [r1]
 8002870:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002872:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002874:	2b00      	cmp	r3, #0
 8002876:	d1e3      	bne.n	8002840 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800287c:	4618      	mov	r0, r3
 800287e:	f7fe f896 	bl	80009ae <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2202      	movs	r2, #2
 8002886:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002890:	b29b      	uxth	r3, r3
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	b29b      	uxth	r3, r3
 8002896:	4619      	mov	r1, r3
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f000 f8c1 	bl	8002a20 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800289e:	e09b      	b.n	80029d8 <HAL_UART_IRQHandler+0x518>
 80028a0:	08002aff 	.word	0x08002aff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f000 808e 	beq.w	80029dc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80028c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f000 8089 	beq.w	80029dc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	330c      	adds	r3, #12
 80028d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028d4:	e853 3f00 	ldrex	r3, [r3]
 80028d8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80028da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80028e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	330c      	adds	r3, #12
 80028ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80028ee:	647a      	str	r2, [r7, #68]	@ 0x44
 80028f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028f2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80028f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80028f6:	e841 2300 	strex	r3, r2, [r1]
 80028fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80028fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1e3      	bne.n	80028ca <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	3314      	adds	r3, #20
 8002908:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800290a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800290c:	e853 3f00 	ldrex	r3, [r3]
 8002910:	623b      	str	r3, [r7, #32]
   return(result);
 8002912:	6a3b      	ldr	r3, [r7, #32]
 8002914:	f023 0301 	bic.w	r3, r3, #1
 8002918:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	3314      	adds	r3, #20
 8002922:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002926:	633a      	str	r2, [r7, #48]	@ 0x30
 8002928:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800292a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800292c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800292e:	e841 2300 	strex	r3, r2, [r1]
 8002932:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1e3      	bne.n	8002902 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2220      	movs	r2, #32
 800293e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	330c      	adds	r3, #12
 800294e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	e853 3f00 	ldrex	r3, [r3]
 8002956:	60fb      	str	r3, [r7, #12]
   return(result);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f023 0310 	bic.w	r3, r3, #16
 800295e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	330c      	adds	r3, #12
 8002968:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800296c:	61fa      	str	r2, [r7, #28]
 800296e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002970:	69b9      	ldr	r1, [r7, #24]
 8002972:	69fa      	ldr	r2, [r7, #28]
 8002974:	e841 2300 	strex	r3, r2, [r1]
 8002978:	617b      	str	r3, [r7, #20]
   return(result);
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d1e3      	bne.n	8002948 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2202      	movs	r2, #2
 8002984:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002986:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800298a:	4619      	mov	r1, r3
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f000 f847 	bl	8002a20 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002992:	e023      	b.n	80029dc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002998:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800299c:	2b00      	cmp	r3, #0
 800299e:	d009      	beq.n	80029b4 <HAL_UART_IRQHandler+0x4f4>
 80029a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d003      	beq.n	80029b4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f000 f8ba 	bl	8002b26 <UART_Transmit_IT>
    return;
 80029b2:	e014      	b.n	80029de <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80029b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00e      	beq.n	80029de <HAL_UART_IRQHandler+0x51e>
 80029c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d008      	beq.n	80029de <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 f8fa 	bl	8002bc6 <UART_EndTransmit_IT>
    return;
 80029d2:	e004      	b.n	80029de <HAL_UART_IRQHandler+0x51e>
    return;
 80029d4:	bf00      	nop
 80029d6:	e002      	b.n	80029de <HAL_UART_IRQHandler+0x51e>
      return;
 80029d8:	bf00      	nop
 80029da:	e000      	b.n	80029de <HAL_UART_IRQHandler+0x51e>
      return;
 80029dc:	bf00      	nop
  }
}
 80029de:	37e8      	adds	r7, #232	@ 0xe8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002a14:	bf00      	nop
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	460b      	mov	r3, r1
 8002a2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b095      	sub	sp, #84	@ 0x54
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	330c      	adds	r3, #12
 8002a46:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a4a:	e853 3f00 	ldrex	r3, [r3]
 8002a4e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a52:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002a56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	330c      	adds	r3, #12
 8002a5e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002a60:	643a      	str	r2, [r7, #64]	@ 0x40
 8002a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a64:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002a66:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002a68:	e841 2300 	strex	r3, r2, [r1]
 8002a6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1e5      	bne.n	8002a40 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	3314      	adds	r3, #20
 8002a7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a7c:	6a3b      	ldr	r3, [r7, #32]
 8002a7e:	e853 3f00 	ldrex	r3, [r3]
 8002a82:	61fb      	str	r3, [r7, #28]
   return(result);
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	f023 0301 	bic.w	r3, r3, #1
 8002a8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	3314      	adds	r3, #20
 8002a92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002a94:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a96:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a9c:	e841 2300 	strex	r3, r2, [r1]
 8002aa0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1e5      	bne.n	8002a74 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d119      	bne.n	8002ae4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	330c      	adds	r3, #12
 8002ab6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	e853 3f00 	ldrex	r3, [r3]
 8002abe:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	f023 0310 	bic.w	r3, r3, #16
 8002ac6:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	330c      	adds	r3, #12
 8002ace:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002ad0:	61ba      	str	r2, [r7, #24]
 8002ad2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ad4:	6979      	ldr	r1, [r7, #20]
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	e841 2300 	strex	r3, r2, [r1]
 8002adc:	613b      	str	r3, [r7, #16]
   return(result);
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d1e5      	bne.n	8002ab0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2220      	movs	r2, #32
 8002ae8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002af2:	bf00      	nop
 8002af4:	3754      	adds	r7, #84	@ 0x54
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b084      	sub	sp, #16
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b0a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002b18:	68f8      	ldr	r0, [r7, #12]
 8002b1a:	f7ff ff77 	bl	8002a0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b1e:	bf00      	nop
 8002b20:	3710      	adds	r7, #16
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b085      	sub	sp, #20
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b21      	cmp	r3, #33	@ 0x21
 8002b38:	d13e      	bne.n	8002bb8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b42:	d114      	bne.n	8002b6e <UART_Transmit_IT+0x48>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d110      	bne.n	8002b6e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	881b      	ldrh	r3, [r3, #0]
 8002b56:	461a      	mov	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b60:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a1b      	ldr	r3, [r3, #32]
 8002b66:	1c9a      	adds	r2, r3, #2
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	621a      	str	r2, [r3, #32]
 8002b6c:	e008      	b.n	8002b80 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	1c59      	adds	r1, r3, #1
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	6211      	str	r1, [r2, #32]
 8002b78:	781a      	ldrb	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	3b01      	subs	r3, #1
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d10f      	bne.n	8002bb4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68da      	ldr	r2, [r3, #12]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ba2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68da      	ldr	r2, [r3, #12]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002bb2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	e000      	b.n	8002bba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002bb8:	2302      	movs	r3, #2
  }
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3714      	adds	r7, #20
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr

08002bc6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b082      	sub	sp, #8
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68da      	ldr	r2, [r3, #12]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002bdc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2220      	movs	r2, #32
 8002be2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7ff fefc 	bl	80029e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b08c      	sub	sp, #48	@ 0x30
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b22      	cmp	r3, #34	@ 0x22
 8002c08:	f040 80ae 	bne.w	8002d68 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c14:	d117      	bne.n	8002c46 <UART_Receive_IT+0x50>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d113      	bne.n	8002c46 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c26:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c38:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c3e:	1c9a      	adds	r2, r3, #2
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	629a      	str	r2, [r3, #40]	@ 0x28
 8002c44:	e026      	b.n	8002c94 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c58:	d007      	beq.n	8002c6a <UART_Receive_IT+0x74>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10a      	bne.n	8002c78 <UART_Receive_IT+0x82>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d106      	bne.n	8002c78 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	b2da      	uxtb	r2, r3
 8002c72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c74:	701a      	strb	r2, [r3, #0]
 8002c76:	e008      	b.n	8002c8a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c84:	b2da      	uxtb	r2, r3
 8002c86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c88:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c8e:	1c5a      	adds	r2, r3, #1
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d15d      	bne.n	8002d64 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68da      	ldr	r2, [r3, #12]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f022 0220 	bic.w	r2, r2, #32
 8002cb6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68da      	ldr	r2, [r3, #12]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002cc6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	695a      	ldr	r2, [r3, #20]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f022 0201 	bic.w	r2, r2, #1
 8002cd6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2220      	movs	r2, #32
 8002cdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d135      	bne.n	8002d5a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	330c      	adds	r3, #12
 8002cfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	e853 3f00 	ldrex	r3, [r3]
 8002d02:	613b      	str	r3, [r7, #16]
   return(result);
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	f023 0310 	bic.w	r3, r3, #16
 8002d0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	330c      	adds	r3, #12
 8002d12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d14:	623a      	str	r2, [r7, #32]
 8002d16:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d18:	69f9      	ldr	r1, [r7, #28]
 8002d1a:	6a3a      	ldr	r2, [r7, #32]
 8002d1c:	e841 2300 	strex	r3, r2, [r1]
 8002d20:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1e5      	bne.n	8002cf4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0310 	and.w	r3, r3, #16
 8002d32:	2b10      	cmp	r3, #16
 8002d34:	d10a      	bne.n	8002d4c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d36:	2300      	movs	r3, #0
 8002d38:	60fb      	str	r3, [r7, #12]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	60fb      	str	r3, [r7, #12]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	60fb      	str	r3, [r7, #12]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002d50:	4619      	mov	r1, r3
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f7ff fe64 	bl	8002a20 <HAL_UARTEx_RxEventCallback>
 8002d58:	e002      	b.n	8002d60 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f7ff fe4c 	bl	80029f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002d60:	2300      	movs	r3, #0
 8002d62:	e002      	b.n	8002d6a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002d64:	2300      	movs	r3, #0
 8002d66:	e000      	b.n	8002d6a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002d68:	2302      	movs	r3, #2
  }
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3730      	adds	r7, #48	@ 0x30
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
	...

08002d74 <__libc_init_array>:
 8002d74:	b570      	push	{r4, r5, r6, lr}
 8002d76:	4d0d      	ldr	r5, [pc, #52]	@ (8002dac <__libc_init_array+0x38>)
 8002d78:	4c0d      	ldr	r4, [pc, #52]	@ (8002db0 <__libc_init_array+0x3c>)
 8002d7a:	1b64      	subs	r4, r4, r5
 8002d7c:	10a4      	asrs	r4, r4, #2
 8002d7e:	2600      	movs	r6, #0
 8002d80:	42a6      	cmp	r6, r4
 8002d82:	d109      	bne.n	8002d98 <__libc_init_array+0x24>
 8002d84:	4d0b      	ldr	r5, [pc, #44]	@ (8002db4 <__libc_init_array+0x40>)
 8002d86:	4c0c      	ldr	r4, [pc, #48]	@ (8002db8 <__libc_init_array+0x44>)
 8002d88:	f000 f818 	bl	8002dbc <_init>
 8002d8c:	1b64      	subs	r4, r4, r5
 8002d8e:	10a4      	asrs	r4, r4, #2
 8002d90:	2600      	movs	r6, #0
 8002d92:	42a6      	cmp	r6, r4
 8002d94:	d105      	bne.n	8002da2 <__libc_init_array+0x2e>
 8002d96:	bd70      	pop	{r4, r5, r6, pc}
 8002d98:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d9c:	4798      	blx	r3
 8002d9e:	3601      	adds	r6, #1
 8002da0:	e7ee      	b.n	8002d80 <__libc_init_array+0xc>
 8002da2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002da6:	4798      	blx	r3
 8002da8:	3601      	adds	r6, #1
 8002daa:	e7f2      	b.n	8002d92 <__libc_init_array+0x1e>
 8002dac:	08002e5c 	.word	0x08002e5c
 8002db0:	08002e5c 	.word	0x08002e5c
 8002db4:	08002e5c 	.word	0x08002e5c
 8002db8:	08002e60 	.word	0x08002e60

08002dbc <_init>:
 8002dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dbe:	bf00      	nop
 8002dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dc2:	bc08      	pop	{r3}
 8002dc4:	469e      	mov	lr, r3
 8002dc6:	4770      	bx	lr

08002dc8 <_fini>:
 8002dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dca:	bf00      	nop
 8002dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dce:	bc08      	pop	{r3}
 8002dd0:	469e      	mov	lr, r3
 8002dd2:	4770      	bx	lr
