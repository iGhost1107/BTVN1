
STM32F401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000258  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003ec  080003ec  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003ec  080003ec  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  080003ec  080003ec  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003ec  080003ec  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003ec  080003ec  000013ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003f0  080003f0  000013f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080003f4  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080003f8  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080003f8  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000012d3  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004f8  00000000  00000000  00003307  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001d0  00000000  00000000  00003800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000144  00000000  00000000  000039d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013b26  00000000  00000000  00003b14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000020e1  00000000  00000000  0001763a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007dfa4  00000000  00000000  0001971b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000976bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000056c  00000000  00000000  00097704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000048  00000000  00000000  00097c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080003d4 	.word	0x080003d4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	080003d4 	.word	0x080003d4

080001d4 <main>:
#include "stm32f4xx.h"  // Include STM32F4 device header

void USART2_Init(void);
char USART2_Read(void);

int main(void) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
    char received_data; // Variable to store received character

    USART2_Init(); // Initialize USART2 for UART communication
 80001da:	f000 f807 	bl	80001ec <USART2_Init>

    while (1) {
        received_data = USART2_Read(); // Read the received character
 80001de:	f000 f841 	bl	8000264 <USART2_Read>
 80001e2:	4603      	mov	r3, r0
 80001e4:	71fb      	strb	r3, [r7, #7]
 80001e6:	bf00      	nop
 80001e8:	e7f9      	b.n	80001de <main+0xa>
	...

080001ec <USART2_Init>:
        // Add any processing for `received_data` here
    }
}

void USART2_Init(void) {
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0
    // Enable clocks for GPIOA and USART2
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;  // Enable GPIOA clock
 80001f0:	4b19      	ldr	r3, [pc, #100]	@ (8000258 <USART2_Init+0x6c>)
 80001f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001f4:	4a18      	ldr	r2, [pc, #96]	@ (8000258 <USART2_Init+0x6c>)
 80001f6:	f043 0301 	orr.w	r3, r3, #1
 80001fa:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN; // Enable USART2 clock
 80001fc:	4b16      	ldr	r3, [pc, #88]	@ (8000258 <USART2_Init+0x6c>)
 80001fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000200:	4a15      	ldr	r2, [pc, #84]	@ (8000258 <USART2_Init+0x6c>)
 8000202:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000206:	6413      	str	r3, [r2, #64]	@ 0x40

    // Configure PA3 (USART2 RX) as alternate function
    GPIOA->MODER &= ~(3U << (3 * 2)); // Clear mode bits for PA3
 8000208:	4b14      	ldr	r3, [pc, #80]	@ (800025c <USART2_Init+0x70>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a13      	ldr	r2, [pc, #76]	@ (800025c <USART2_Init+0x70>)
 800020e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000212:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (2U << (3 * 2));  // Set alternate function mode for PA3
 8000214:	4b11      	ldr	r3, [pc, #68]	@ (800025c <USART2_Init+0x70>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a10      	ldr	r2, [pc, #64]	@ (800025c <USART2_Init+0x70>)
 800021a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800021e:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] |= (7U << (4 * 3)); // Set AF7 (USART2) for PA3
 8000220:	4b0e      	ldr	r3, [pc, #56]	@ (800025c <USART2_Init+0x70>)
 8000222:	6a1b      	ldr	r3, [r3, #32]
 8000224:	4a0d      	ldr	r2, [pc, #52]	@ (800025c <USART2_Init+0x70>)
 8000226:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 800022a:	6213      	str	r3, [r2, #32]

    // USART2 configuration
    USART2->BRR = 0x683;              // Set baud rate to 9600 (assuming 16MHz clock)
 800022c:	4b0c      	ldr	r3, [pc, #48]	@ (8000260 <USART2_Init+0x74>)
 800022e:	f240 6283 	movw	r2, #1667	@ 0x683
 8000232:	609a      	str	r2, [r3, #8]
    USART2->CR1 |= USART_CR1_RE;     // Enable receiver
 8000234:	4b0a      	ldr	r3, [pc, #40]	@ (8000260 <USART2_Init+0x74>)
 8000236:	68db      	ldr	r3, [r3, #12]
 8000238:	4a09      	ldr	r2, [pc, #36]	@ (8000260 <USART2_Init+0x74>)
 800023a:	f043 0304 	orr.w	r3, r3, #4
 800023e:	60d3      	str	r3, [r2, #12]
    USART2->CR1 |= USART_CR1_UE;     // Enable USART2
 8000240:	4b07      	ldr	r3, [pc, #28]	@ (8000260 <USART2_Init+0x74>)
 8000242:	68db      	ldr	r3, [r3, #12]
 8000244:	4a06      	ldr	r2, [pc, #24]	@ (8000260 <USART2_Init+0x74>)
 8000246:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800024a:	60d3      	str	r3, [r2, #12]
}
 800024c:	bf00      	nop
 800024e:	46bd      	mov	sp, r7
 8000250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000254:	4770      	bx	lr
 8000256:	bf00      	nop
 8000258:	40023800 	.word	0x40023800
 800025c:	40020000 	.word	0x40020000
 8000260:	40004400 	.word	0x40004400

08000264 <USART2_Read>:

char USART2_Read(void) {
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0
    while (!(USART2->SR & USART_SR_RXNE)) {} // Wait until data is available to read
 8000268:	bf00      	nop
 800026a:	4b07      	ldr	r3, [pc, #28]	@ (8000288 <USART2_Read+0x24>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	f003 0320 	and.w	r3, r3, #32
 8000272:	2b00      	cmp	r3, #0
 8000274:	d0f9      	beq.n	800026a <USART2_Read+0x6>
    return (char)(USART2->DR);               // Return the received character
 8000276:	4b04      	ldr	r3, [pc, #16]	@ (8000288 <USART2_Read+0x24>)
 8000278:	685b      	ldr	r3, [r3, #4]
 800027a:	b2db      	uxtb	r3, r3
}
 800027c:	4618      	mov	r0, r3
 800027e:	46bd      	mov	sp, r7
 8000280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000284:	4770      	bx	lr
 8000286:	bf00      	nop
 8000288:	40004400 	.word	0x40004400

0800028c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800028c:	b480      	push	{r7}
 800028e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000290:	bf00      	nop
 8000292:	e7fd      	b.n	8000290 <NMI_Handler+0x4>

08000294 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000294:	b480      	push	{r7}
 8000296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000298:	bf00      	nop
 800029a:	e7fd      	b.n	8000298 <HardFault_Handler+0x4>

0800029c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002a0:	bf00      	nop
 80002a2:	e7fd      	b.n	80002a0 <MemManage_Handler+0x4>

080002a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002a8:	bf00      	nop
 80002aa:	e7fd      	b.n	80002a8 <BusFault_Handler+0x4>

080002ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002b0:	bf00      	nop
 80002b2:	e7fd      	b.n	80002b0 <UsageFault_Handler+0x4>

080002b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002b4:	b480      	push	{r7}
 80002b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002b8:	bf00      	nop
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr

080002c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002c2:	b480      	push	{r7}
 80002c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002c6:	bf00      	nop
 80002c8:	46bd      	mov	sp, r7
 80002ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ce:	4770      	bx	lr

080002d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002d4:	bf00      	nop
 80002d6:	46bd      	mov	sp, r7
 80002d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002dc:	4770      	bx	lr

080002de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002de:	b580      	push	{r7, lr}
 80002e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002e2:	f000 f83f 	bl	8000364 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002e6:	bf00      	nop
 80002e8:	bd80      	pop	{r7, pc}
	...

080002ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002f0:	4b06      	ldr	r3, [pc, #24]	@ (800030c <SystemInit+0x20>)
 80002f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80002f6:	4a05      	ldr	r2, [pc, #20]	@ (800030c <SystemInit+0x20>)
 80002f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80002fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000300:	bf00      	nop
 8000302:	46bd      	mov	sp, r7
 8000304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	e000ed00 	.word	0xe000ed00

08000310 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000310:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000348 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000314:	f7ff ffea 	bl	80002ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000318:	480c      	ldr	r0, [pc, #48]	@ (800034c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800031a:	490d      	ldr	r1, [pc, #52]	@ (8000350 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800031c:	4a0d      	ldr	r2, [pc, #52]	@ (8000354 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800031e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000320:	e002      	b.n	8000328 <LoopCopyDataInit>

08000322 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000322:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000324:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000326:	3304      	adds	r3, #4

08000328 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000328:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800032a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800032c:	d3f9      	bcc.n	8000322 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800032e:	4a0a      	ldr	r2, [pc, #40]	@ (8000358 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000330:	4c0a      	ldr	r4, [pc, #40]	@ (800035c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000332:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000334:	e001      	b.n	800033a <LoopFillZerobss>

08000336 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000336:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000338:	3204      	adds	r2, #4

0800033a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800033a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800033c:	d3fb      	bcc.n	8000336 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800033e:	f000 f825 	bl	800038c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000342:	f7ff ff47 	bl	80001d4 <main>
  bx  lr    
 8000346:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000348:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800034c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000350:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000354:	080003f4 	.word	0x080003f4
  ldr r2, =_sbss
 8000358:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800035c:	20000024 	.word	0x20000024

08000360 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000360:	e7fe      	b.n	8000360 <ADC_IRQHandler>
	...

08000364 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000368:	4b06      	ldr	r3, [pc, #24]	@ (8000384 <HAL_IncTick+0x20>)
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	461a      	mov	r2, r3
 800036e:	4b06      	ldr	r3, [pc, #24]	@ (8000388 <HAL_IncTick+0x24>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	4413      	add	r3, r2
 8000374:	4a04      	ldr	r2, [pc, #16]	@ (8000388 <HAL_IncTick+0x24>)
 8000376:	6013      	str	r3, [r2, #0]
}
 8000378:	bf00      	nop
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	20000000 	.word	0x20000000
 8000388:	20000020 	.word	0x20000020

0800038c <__libc_init_array>:
 800038c:	b570      	push	{r4, r5, r6, lr}
 800038e:	4d0d      	ldr	r5, [pc, #52]	@ (80003c4 <__libc_init_array+0x38>)
 8000390:	4c0d      	ldr	r4, [pc, #52]	@ (80003c8 <__libc_init_array+0x3c>)
 8000392:	1b64      	subs	r4, r4, r5
 8000394:	10a4      	asrs	r4, r4, #2
 8000396:	2600      	movs	r6, #0
 8000398:	42a6      	cmp	r6, r4
 800039a:	d109      	bne.n	80003b0 <__libc_init_array+0x24>
 800039c:	4d0b      	ldr	r5, [pc, #44]	@ (80003cc <__libc_init_array+0x40>)
 800039e:	4c0c      	ldr	r4, [pc, #48]	@ (80003d0 <__libc_init_array+0x44>)
 80003a0:	f000 f818 	bl	80003d4 <_init>
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	10a4      	asrs	r4, r4, #2
 80003a8:	2600      	movs	r6, #0
 80003aa:	42a6      	cmp	r6, r4
 80003ac:	d105      	bne.n	80003ba <__libc_init_array+0x2e>
 80003ae:	bd70      	pop	{r4, r5, r6, pc}
 80003b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003b4:	4798      	blx	r3
 80003b6:	3601      	adds	r6, #1
 80003b8:	e7ee      	b.n	8000398 <__libc_init_array+0xc>
 80003ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80003be:	4798      	blx	r3
 80003c0:	3601      	adds	r6, #1
 80003c2:	e7f2      	b.n	80003aa <__libc_init_array+0x1e>
 80003c4:	080003ec 	.word	0x080003ec
 80003c8:	080003ec 	.word	0x080003ec
 80003cc:	080003ec 	.word	0x080003ec
 80003d0:	080003f0 	.word	0x080003f0

080003d4 <_init>:
 80003d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003d6:	bf00      	nop
 80003d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003da:	bc08      	pop	{r3}
 80003dc:	469e      	mov	lr, r3
 80003de:	4770      	bx	lr

080003e0 <_fini>:
 80003e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003e2:	bf00      	nop
 80003e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003e6:	bc08      	pop	{r3}
 80003e8:	469e      	mov	lr, r3
 80003ea:	4770      	bx	lr
